apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"argoproj.io/v1alpha1","kind":"Application","metadata":{"annotations":{},"name":"pimcore-sbx-mysql","namespace":"argo-cd"},"spec":{"destination":{"namespace":"pimcore-sbx","server":"https://kubernetes.default.svc"},"project":"default","source":{"chart":"mysql","helm":{"parameters":[{"name":"auth.database","value":"pimcore"},{"name":"auth.password","value":"pimcore"},{"name":"auth.rootPassword","value":"pimcore"},{"name":"auth.username","value":"pimcore"}],"values":"#
      Copyright VMware, Inc.\n# SPDX-License-Identifier: APACHE-2.0\n\n##
      @section Global parameters\n## Global Docker image parameters\n## Please,
      note that this will override the image parameters, including dependencies,
      configured to use the global value\n## Current available global Docker
      image parameters: imageRegistry, imagePullSecrets and
      storageClass\n##\n\n## @param global.imageRegistry Global Docker image
      registry\n## @param global.imagePullSecrets Global Docker registry secret
      names as an array\n## @param global.storageClass Global StorageClass for
      Persistent Volume(s)\n##\nglobal:\n  imageRegistry: \"\"\n  ## E.g.\n  ##
      imagePullSecrets:\n  ##   - myRegistryKeySecretName\n  ##\n 
      imagePullSecrets: []\n  storageClass: \"\"\n\n## @section Common
      parameters\n##\n\n## @param kubeVersion Force target Kubernetes version
      (using Helm capabilities if not set)\n##\nkubeVersion: \"\"\n## @param
      nameOverride String to partially override common.names.fullname template
      (will maintain the release name)\n##\nnameOverride: \"\"\n## @param
      fullnameOverride String to fully override common.names.fullname
      template\n##\nfullnameOverride: \"\"\n## @param namespaceOverride String
      to fully override common.names.namespace\n##\nnamespaceOverride: \"\"\n##
      @param clusterDomain Cluster domain\n##\nclusterDomain: cluster.local\n##
      @param commonAnnotations Common annotations to add to all MySQL resources
      (sub-charts are not considered). Evaluated as a
      template\n##\ncommonAnnotations: {}\n## @param commonLabels Common labels
      to add to all MySQL resources (sub-charts are not considered). Evaluated
      as a template\n##\ncommonLabels: {}\n## @param extraDeploy Array with
      extra yaml to deploy with the chart. Evaluated as a
      template\n##\nextraDeploy: []\n\n## @param serviceBindings.enabled Create
      secret for service binding (Experimental)\n## Ref:
      https://servicebinding.io/service-provider/\n##\nserviceBindings:\n 
      enabled: false\n\n## Enable diagnostic mode in the
      deployment\n##\ndiagnosticMode:\n  ## @param diagnosticMode.enabled Enable
      diagnostic mode (all probes will be disabled and the command will be
      overridden)\n  ##\n  enabled: false\n  ## @param diagnosticMode.command
      Command to override all containers in the deployment\n  ##\n 
      command:\n    - sleep\n  ## @param diagnosticMode.args Args to override
      all containers in the deployment\n  ##\n  args:\n    - infinity\n\n##
      @section MySQL common parameters\n##\n\n## Bitnami MySQL image\n## ref:
      https://hub.docker.com/r/bitnami/mysql/tags/\n## @param image.registry
      [default: REGISTRY_NAME] MySQL image registry\n## @param image.repository
      [default: REPOSITORY_NAME/mysql] MySQL image repository\n## @skip
      image.tag MySQL image tag (immutable tags are recommended)\n## @param
      image.digest MySQL image digest in the way sha256:aa.... Please note this
      parameter, if set, will override the tag\n## @param image.pullPolicy MySQL
      image pull policy\n## @param image.pullSecrets Specify docker-registry
      secret names as an array\n## @param image.debug Specify if debug logs
      should be enabled\n##\nimage:\n  registry: docker.io\n  repository:
      bitnami/mysql\n  tag: 8.0.35-debian-11-r0\n  digest: \"\"\n  ## Specify a
      imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else
      set to 'IfNotPresent'\n  ## ref:
      https://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n 
      pullPolicy: IfNotPresent\n  ## Optionally specify an array of
      imagePullSecrets (secrets must be manually created in the namespace)\n  ##
      ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n 
      ## Example:\n  ## pullSecrets:\n  ##   - myRegistryKeySecretName\n  ##\n 
      pullSecrets: []\n  ## Set to true if you would like to see extra
      information on logs\n  ## It turns BASH and/or NAMI debugging in the
      image\n  ##\n  debug: false\n## @param architecture MySQL architecture
      (`standalone` or `replication`)\n##\narchitecture: standalone\n## MySQL
      Authentication parameters\n##\nauth:\n  ## @param auth.rootPassword
      Password for the `root` user. Ignored if existing secret is provided\n  ##
      ref:
      https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run\n 
      ##\n  rootPassword: \"\"\n  ## @param auth.createDatabase Whether to
      create the .Values.auth.database or not\n  ## ref:
      https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run\n 
      ##\n  createDatabase: true\n  ## @param auth.database Name for a custom
      database to create\n  ## ref:
      https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run\n 
      ##\n  database: \"my_database\"\n  ## @param auth.username Name for a
      custom user to create\n  ## ref:
      https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run\n 
      ##\n  username: \"\"\n  ## @param auth.password Password for the new user.
      Ignored if existing secret is provided\n  ##\n  password: \"\"\n  ##
      @param auth.replicationUser MySQL replication user\n  ## ref:
      https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster\n 
      ##\n  replicationUser: replicator\n  ## @param auth.replicationPassword
      MySQL replication user password. Ignored if existing secret is provided\n 
      ##\n  replicationPassword: \"\"\n  ## @param auth.existingSecret Use
      existing secret for password details. The secret has to contain the keys
      `mysql-root-password`, `mysql-replication-password` and
      `mysql-password`\n  ## NOTE: When it's set the auth.rootPassword,
      auth.password, auth.replicationPassword are ignored.\n  ##\n 
      existingSecret: \"\"\n  ## @param auth.usePasswordFiles Mount credentials
      as files instead of using an environment variable\n  ##\n 
      usePasswordFiles: false\n  ## @param auth.customPasswordFiles Use custom
      password files when `auth.usePasswordFiles` is set to `true`. Define path
      for keys `root` and `user`, also define `replicator` if `architecture` is
      set to `replication`\n  ## Example:\n  ## customPasswordFiles:\n  ##  
      root: /vault/secrets/mysql-root\n  ##   user: /vault/secrets/mysql-user\n 
      ##   replicator: /vault/secrets/mysql-replicator\n  ##\n 
      customPasswordFiles: {}\n  ## @param auth.defaultAuthenticationPlugin Sets
      the default authentication plugin, by default it will use
      `mysql_native_password`\n  ## NOTE: `mysql_native_password` will be
      deprecated in future mysql version and it is used here for compatibility
      with previous version. If you want to use the new default authentication
      method set it to `caching_sha2_password`.\n  ##\n 
      defaultAuthenticationPlugin: \"\"\n## @param initdbScripts Dictionary of
      initdb scripts\n## Specify dictionary of scripts to be run at first
      boot\n## Example:\n## initdbScripts:\n##   my_init_script.sh: |\n##     
      #!/bin/bash\n##      echo \"Do something.\"\n##\ninitdbScripts: {}\n##
      @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note:
      Overrides `initdbScripts`)\n##\ninitdbScriptsConfigMap: \"\"\n## @param
      startdbScripts Dictionary of startdb scripts\n## Specify dictionary of
      scripts to be run every time the container is started\n## Example:\n##
      startdbScripts:\n##   my_start_script.sh: |\n##      #!/bin/bash\n##     
      echo \"Do something.\"\n##\nstartdbScripts: {}\n## @param
      startdbScriptsConfigMap ConfigMap with the startdb scripts (Note:
      Overrides `startdbScripts`)\n##\nstartdbScriptsConfigMap: \"\"\n\n##
      @section MySQL Primary parameters\n##\n\nprimary:\n  ## @param
      primary.name Name of the primary database (eg primary, master, leader,
      ...)\n  ##\n  name: primary\n  ## @param primary.command Override default
      container command on MySQL Primary container(s) (useful when using custom
      images)\n  ##\n  command: []\n  ## @param primary.args Override default
      container args on MySQL Primary container(s) (useful when using custom
      images)\n  ##\n  args: []\n  ## @param primary.lifecycleHooks for the
      MySQL Primary container(s) to automate configuration before or after
      startup\n  ##\n  lifecycleHooks: {}\n  ## @param primary.hostAliases
      Deployment pod host aliases\n  ##
      https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\n 
      ##\n  hostAliases: []\n  ## @param primary.configuration [string]
      Configure MySQL Primary with a custom my.cnf file\n  ## ref:
      https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file\n 
      ##\n  configuration: |-\n    [mysqld]\n   
      default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin
      | default \"mysql_native_password\" }}\n    skip-name-resolve\n   
      explicit_defaults_for_timestamp\n    basedir=/opt/bitnami/mysql\n   
      plugin_dir=/opt/bitnami/mysql/lib/plugin\n    port=3306\n   
      socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      datadir=/bitnami/mysql/data\n    tmpdir=/opt/bitnami/mysql/tmp\n   
      max_allowed_packet=16M\n    bind-address=*\n   
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n   
      log-error=/opt/bitnami/mysql/logs/mysqld.log\n   
      character-set-server=UTF8MB4\n    slow_query_log=0\n   
      long_query_time=10.0\n\n    [client]\n    port=3306\n   
      socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      default-character-set=UTF8MB4\n   
      plugin_dir=/opt/bitnami/mysql/lib/plugin\n\n    [manager]\n   
      port=3306\n    socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n  ## @param
      primary.existingConfigmap Name of existing ConfigMap with MySQL Primary
      configuration.\n  ## NOTE: When it's set the 'configuration' parameter is
      ignored\n  ##\n  existingConfigmap: \"\"\n  ## @param
      primary.updateStrategy.type Update strategy type for the MySQL primary
      statefulset\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies\n 
      ##\n  updateStrategy:\n    type: RollingUpdate\n  ## @param
      primary.podAnnotations Additional pod annotations for MySQL primary
      pods\n  ## ref:
      https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n 
      ##\n  podAnnotations: {}\n  ## @param primary.podAffinityPreset MySQL
      primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed
      values: `soft` or `hard`\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n 
      ##\n  podAffinityPreset: \"\"\n  ## @param primary.podAntiAffinityPreset
      MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is
      set. Allowed values: `soft` or `hard`\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n 
      ##\n  podAntiAffinityPreset: soft\n  ## MySQL Primary node affinity
      preset\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n 
      ##\n  nodeAffinityPreset:\n    ## @param primary.nodeAffinityPreset.type
      MySQL primary node affinity preset type. Ignored if `primary.affinity` is
      set. Allowed values: `soft` or `hard`\n    ##\n    type: \"\"\n    ##
      @param primary.nodeAffinityPreset.key MySQL primary node label key to
      match Ignored if `primary.affinity` is set.\n    ## E.g.\n    ## key:
      \"kubernetes.io/e2e-az-name\"\n    ##\n    key: \"\"\n    ## @param
      primary.nodeAffinityPreset.values MySQL primary node label values to
      match. Ignored if `primary.affinity` is set.\n    ## E.g.\n    ##
      values:\n    ##   - e2e-az1\n    ##   - e2e-az2\n    ##\n    values: []\n 
      ## @param primary.affinity Affinity for MySQL primary pods assignment\n 
      ## ref:
      https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n 
      ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset
      will be ignored when it's set\n  ##\n  affinity: {}\n  ## @param
      primary.nodeSelector Node labels for MySQL primary pods assignment\n  ##
      ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n 
      nodeSelector: {}\n  ## @param primary.tolerations Tolerations for MySQL
      primary pods assignment\n  ## ref:
      https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n 
      ##\n  tolerations: []\n  ## @param primary.priorityClassName MySQL primary
      pods' priorityClassName\n  ##\n  priorityClassName: \"\"\n  ## @param
      primary.runtimeClassName MySQL primary pods' runtimeClassName\n  ##\n 
      runtimeClassName: \"\"\n  ## @param primary.schedulerName Name of the k8s
      scheduler (other than default)\n  ## ref:
      https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\n 
      ##\n  schedulerName: \"\"\n  ## @param
      primary.terminationGracePeriodSeconds In seconds, time the given to the
      MySQL primary pod needs to terminate gracefully\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods\n 
      ##\n  terminationGracePeriodSeconds: \"\"\n  ## @param
      primary.topologySpreadConstraints Topology Spread Constraints for pod
      assignment\n  ##
      https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n 
      ## The value is evaluated as a template\n  ##\n 
      topologySpreadConstraints: []\n  ## @param primary.podManagementPolicy
      podManagementPolicy to manage scaling operation of MySQL primary pods\n 
      ## ref:
      https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies\n 
      ##\n  podManagementPolicy: \"\"\n  ## MySQL primary Pod security
      context\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n 
      ## @param primary.podSecurityContext.enabled Enable security context for
      MySQL primary pods\n  ## @param primary.podSecurityContext.fsGroup Group
      ID for the mounted volumes' filesystem\n  ##\n  podSecurityContext:\n   
      enabled: true\n    fsGroup: 1001\n  ## MySQL primary container security
      context\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container\n 
      ## @param primary.containerSecurityContext.enabled MySQL primary container
      securityContext\n  ## @param primary.containerSecurityContext.runAsUser
      User ID for the MySQL primary container\n  ## @param
      primary.containerSecurityContext.runAsNonRoot Set MySQL primary
      container's Security Context runAsNonRoot\n  ## @param
      primary.containerSecurityContext.allowPrivilegeEscalation Set container's
      privilege escalation\n  ## @param
      primary.containerSecurityContext.capabilities.drop Set container's
      Security Context runAsNonRoot\n  ## @param
      primary.containerSecurityContext.seccompProfile.type Set Client
      container's Security Context seccomp profile\n  ##\n 
      containerSecurityContext:\n    enabled: true\n    runAsUser: 1001\n   
      runAsNonRoot: true\n    allowPrivilegeEscalation: false\n   
      capabilities:\n      drop: [\"ALL\"]\n    seccompProfile:\n      type:
      \"RuntimeDefault\"\n  ## MySQL primary container's resource requests and
      limits\n  ## ref:
      https://kubernetes.io/docs/user-guide/compute-resources/\n  ## We usually
      recommend not to specify default resources and to leave this as a
      conscious\n  ## choice for the user. This also increases chances charts
      run on environments with little\n  ## resources, such as Minikube. If you
      do want to specify resources, uncomment the following\n  ## lines, adjust
      them as necessary, and remove the curly braces after 'resources:'.\n  ##
      @param primary.resources.limits The resources limits for MySQL primary
      containers\n  ## @param primary.resources.requests The requested resources
      for MySQL primary containers\n  ##\n  resources:\n    ## Example:\n    ##
      limits:\n    ##    cpu: 250m\n    ##    memory: 256Mi\n    ##\n    limits:
      {}\n    ## Examples:\n    ## requests:\n    ##    cpu: 250m\n    ##   
      memory: 256Mi\n    ##\n    requests: {}\n  ## Configure extra options for
      liveness probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param primary.livenessProbe.enabled Enable livenessProbe\n  ## @param
      primary.livenessProbe.initialDelaySeconds Initial delay seconds for
      livenessProbe\n  ## @param primary.livenessProbe.periodSeconds Period
      seconds for livenessProbe\n  ## @param
      primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n 
      ## @param primary.livenessProbe.failureThreshold Failure threshold for
      livenessProbe\n  ## @param primary.livenessProbe.successThreshold Success
      threshold for livenessProbe\n  ##\n  livenessProbe:\n    enabled:
      true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n   
      timeoutSeconds: 1\n    failureThreshold: 3\n    successThreshold: 1\n  ##
      Configure extra options for readiness probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param primary.readinessProbe.enabled Enable readinessProbe\n  ##
      @param primary.readinessProbe.initialDelaySeconds Initial delay seconds
      for readinessProbe\n  ## @param primary.readinessProbe.periodSeconds
      Period seconds for readinessProbe\n  ## @param
      primary.readinessProbe.timeoutSeconds Timeout seconds for
      readinessProbe\n  ## @param primary.readinessProbe.failureThreshold
      Failure threshold for readinessProbe\n  ## @param
      primary.readinessProbe.successThreshold Success threshold for
      readinessProbe\n  ##\n  readinessProbe:\n    enabled: true\n   
      initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      failureThreshold: 3\n    successThreshold: 1\n  ## Configure extra options
      for startupProbe probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param primary.startupProbe.enabled Enable startupProbe\n  ## @param
      primary.startupProbe.initialDelaySeconds Initial delay seconds for
      startupProbe\n  ## @param primary.startupProbe.periodSeconds Period
      seconds for startupProbe\n  ## @param primary.startupProbe.timeoutSeconds
      Timeout seconds for startupProbe\n  ## @param
      primary.startupProbe.failureThreshold Failure threshold for
      startupProbe\n  ## @param primary.startupProbe.successThreshold Success
      threshold for startupProbe\n  ##\n  startupProbe:\n    enabled: true\n   
      initialDelaySeconds: 15\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      failureThreshold: 10\n    successThreshold: 1\n  ## @param
      primary.customLivenessProbe Override default liveness probe for MySQL
      primary containers\n  ##\n  customLivenessProbe: {}\n  ## @param
      primary.customReadinessProbe Override default readiness probe for MySQL
      primary containers\n  ##\n  customReadinessProbe: {}\n  ## @param
      primary.customStartupProbe Override default startup probe for MySQL
      primary containers\n  ##\n  customStartupProbe: {}\n  ## @param
      primary.extraFlags MySQL primary additional command line flags\n  ## Can
      be used to specify command line flags, for example:\n  ## E.g.\n  ##
      extraFlags: \"--max-connect-errors=1000 --max_connections=155\"\n  ##\n 
      extraFlags: \"\"\n  ## @param primary.extraEnvVars Extra environment
      variables to be set on MySQL primary containers\n  ## E.g.\n  ##
      extraEnvVars:\n  ##  - name: TZ\n  ##    value: \"Europe/Paris\"\n  ##\n 
      extraEnvVars: []\n  ## @param primary.extraEnvVarsCM Name of existing
      ConfigMap containing extra env vars for MySQL primary containers\n  ##\n 
      extraEnvVarsCM: \"\"\n  ## @param primary.extraEnvVarsSecret Name of
      existing Secret containing extra env vars for MySQL primary containers\n 
      ##\n  extraEnvVarsSecret: \"\"\n  ## @param primary.extraPorts Extra ports
      to expose\n  ##\n  extraPorts: []\n  ## Enable persistence using
      Persistent Volume Claims\n  ## ref:
      https://kubernetes.io/docs/user-guide/persistent-volumes/\n  ##\n 
      persistence:\n    ## @param primary.persistence.enabled Enable persistence
      on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use
      emptyDir\n    ##\n    enabled: true\n    ## @param
      primary.persistence.existingClaim Name of an existing
      `PersistentVolumeClaim` for MySQL primary replicas\n    ## NOTE: When it's
      set the rest of persistence parameters are ignored\n    ##\n   
      existingClaim: \"\"\n    ## @param primary.persistence.subPath The name of
      a volume's sub path to mount for persistence\n    ##\n    subPath:
      \"\"\n    ## @param primary.persistence.storageClass MySQL primary
      persistent volume storage Class\n    ## If defined, storageClassName:
      \u003cstorageClass\u003e\n    ## If set to \"-\", storageClassName: \"\",
      which disables dynamic provisioning\n    ## If undefined (the default) or
      set to null, no storageClassName spec is\n    ##   set, choosing the
      default provisioner.  (gp2 on AWS, standard on\n    ##   GKE, AWS \u0026
      OpenStack)\n    ##\n    storageClass: \"\"\n    ## @param
      primary.persistence.annotations MySQL primary persistent volume claim
      annotations\n    ##\n    annotations: {}\n    ## @param
      primary.persistence.accessModes MySQL primary persistent volume access
      Modes\n    ##\n    accessModes:\n      - ReadWriteOnce\n    ## @param
      primary.persistence.size MySQL primary persistent volume size\n    ##\n   
      size: 8Gi\n    ## @param primary.persistence.selector Selector to match an
      existing Persistent Volume\n    ## selector:\n    ##   matchLabels:\n   
      ##     app: my-app\n    ##\n    selector: {}\n  ## @param
      primary.extraVolumes Optionally specify extra list of additional volumes
      to the MySQL Primary pod(s)\n  ##\n  extraVolumes: []\n  ## @param
      primary.extraVolumeMounts Optionally specify extra list of additional
      volumeMounts for the MySQL Primary container(s)\n  ##\n 
      extraVolumeMounts: []\n  ## @param primary.initContainers Add additional
      init containers for the MySQL Primary pod(s)\n  ##\n  initContainers:
      []\n  ## @param primary.sidecars Add additional sidecar containers for the
      MySQL Primary pod(s)\n  ##\n  sidecars: []\n  ## MySQL Primary Service
      parameters\n  ##\n  service:\n    ## @param primary.service.type MySQL
      Primary K8s service type\n    ##\n    type: ClusterIP\n    ## @param
      primary.service.ports.mysql MySQL Primary K8s service port\n    ##\n   
      ports:\n      mysql: 3306\n    ## @param primary.service.nodePorts.mysql
      MySQL Primary K8s service node port\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n   
      ##\n    nodePorts:\n      mysql: \"\"\n    ## @param
      primary.service.clusterIP MySQL Primary K8s service clusterIP IP\n    ##
      e.g:\n    ## clusterIP: None\n    ##\n    clusterIP: \"\"\n    ## @param
      primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service
      type is `LoadBalancer`\n    ## Set the LoadBalancer service type to
      internal only\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n   
      ##\n    loadBalancerIP: \"\"\n    ## @param
      primary.service.externalTrafficPolicy Enable client source IP
      preservation\n    ## ref
      https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n   
      ##\n    externalTrafficPolicy: Cluster\n    ## @param
      primary.service.loadBalancerSourceRanges Addresses that are allowed when
      MySQL Primary service is LoadBalancer\n    ##
      https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n   
      ## E.g.\n    ## loadBalancerSourceRanges:\n    ##   - 10.10.10.0/24\n   
      ##\n    loadBalancerSourceRanges: []\n    ## @param
      primary.service.extraPorts Extra ports to expose (normally used with the
      `sidecar` value)\n    ##\n    extraPorts: []\n    ## @param
      primary.service.annotations Additional custom annotations for MySQL
      primary service\n    ##\n    annotations: {}\n    ## @param
      primary.service.sessionAffinity Session Affinity for Kubernetes service,
      can be \"None\" or \"ClientIP\"\n    ## If \"ClientIP\", consecutive
      client requests will be directed to the same Pod\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n   
      ##\n    sessionAffinity: None\n    ## @param
      primary.service.sessionAffinityConfig Additional settings for the
      sessionAffinity\n    ## sessionAffinityConfig:\n    ##   clientIP:\n   
      ##     timeoutSeconds: 300\n    ##\n    sessionAffinityConfig: {}\n    ##
      Headless service properties\n    ##\n    headless:\n      ## @param
      primary.service.headless.annotations Additional custom annotations for
      headless MySQL primary service.\n      ##\n      annotations: {}\n\n  ##
      MySQL primary Pod Disruption Budget configuration\n  ## ref:
      https://kubernetes.io/docs/tasks/run-application/configure-pdb/\n  ##\n 
      pdb:\n    ## @param primary.pdb.create Enable/disable a Pod Disruption
      Budget creation for MySQL primary pods\n    ##\n    create: false\n    ##
      @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary
      pods that should remain scheduled\n    ##\n    minAvailable: 1\n    ##
      @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL
      primary pods that may be made unavailable\n    ##\n    maxUnavailable:
      \"\"\n  ## @param primary.podLabels MySQL Primary pod label. If labels are
      same as commonLabels , this will take precedence\n  ##\n  podLabels:
      {}\n\n## @section MySQL Secondary parameters\n##\n\nsecondary:\n  ##
      @param secondary.name Name of the secondary database (eg secondary, slave,
      ...)\n  ##\n  name: secondary\n  ## @param secondary.replicaCount Number
      of MySQL secondary replicas\n  ##\n  replicaCount: 1\n  ## @param
      secondary.hostAliases Deployment pod host aliases\n  ##
      https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\n 
      ##\n  hostAliases: []\n  ## @param secondary.command Override default
      container command on MySQL Secondary container(s) (useful when using
      custom images)\n  ##\n  command: []\n  ## @param secondary.args Override
      default container args on MySQL Secondary container(s) (useful when using
      custom images)\n  ##\n  args: []\n  ## @param secondary.lifecycleHooks for
      the MySQL Secondary container(s) to automate configuration before or after
      startup\n  ##\n  lifecycleHooks: {}\n  ## @param secondary.configuration
      [string] Configure MySQL Secondary with a custom my.cnf file\n  ## ref:
      https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file\n 
      ##\n  configuration: |-\n    [mysqld]\n   
      default_authentication_plugin=mysql_native_password\n   
      skip-name-resolve\n    explicit_defaults_for_timestamp\n   
      basedir=/opt/bitnami/mysql\n   
      plugin_dir=/opt/bitnami/mysql/lib/plugin\n    port=3306\n   
      socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      datadir=/bitnami/mysql/data\n    tmpdir=/opt/bitnami/mysql/tmp\n   
      max_allowed_packet=16M\n    bind-address=*\n   
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n   
      log-error=/opt/bitnami/mysql/logs/mysqld.log\n   
      character-set-server=UTF8MB4\n    slow_query_log=0\n   
      long_query_time=10.0\n\n    [client]\n    port=3306\n   
      socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      default-character-set=UTF8MB4\n   
      plugin_dir=/opt/bitnami/mysql/lib/plugin\n\n    [manager]\n   
      port=3306\n    socket=/opt/bitnami/mysql/tmp/mysql.sock\n   
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n  ## @param
      secondary.existingConfigmap Name of existing ConfigMap with MySQL
      Secondary configuration.\n  ## NOTE: When it's set the 'configuration'
      parameter is ignored\n  ##\n  existingConfigmap: \"\"\n  ## @param
      secondary.updateStrategy.type Update strategy type for the MySQL secondary
      statefulset\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies\n 
      ##\n  updateStrategy:\n    type: RollingUpdate\n  ## @param
      secondary.podAnnotations Additional pod annotations for MySQL secondary
      pods\n  ## ref:
      https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n 
      ##\n  podAnnotations: {}\n  ## @param secondary.podAffinityPreset MySQL
      secondary pod affinity preset. Ignored if `secondary.affinity` is set.
      Allowed values: `soft` or `hard`\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n 
      ##\n  podAffinityPreset: \"\"\n  ## @param secondary.podAntiAffinityPreset
      MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity`
      is set. Allowed values: `soft` or `hard`\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n 
      ## Allowed values: soft, hard\n  ##\n  podAntiAffinityPreset: soft\n  ##
      MySQL Secondary node affinity preset\n  ## ref:
      https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n 
      ##\n  nodeAffinityPreset:\n    ## @param secondary.nodeAffinityPreset.type
      MySQL secondary node affinity preset type. Ignored if `secondary.affinity`
      is set. Allowed values: `soft` or `hard`\n    ##\n    type: \"\"\n    ##
      @param secondary.nodeAffinityPreset.key MySQL secondary node label key to
      match Ignored if `secondary.affinity` is set.\n    ## E.g.\n    ## key:
      \"kubernetes.io/e2e-az-name\"\n    ##\n    key: \"\"\n    ## @param
      secondary.nodeAffinityPreset.values MySQL secondary node label values to
      match. Ignored if `secondary.affinity` is set.\n    ## E.g.\n    ##
      values:\n    ##   - e2e-az1\n    ##   - e2e-az2\n    ##\n    values: []\n 
      ## @param secondary.affinity Affinity for MySQL secondary pods
      assignment\n  ## ref:
      https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n 
      ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset
      will be ignored when it's set\n  ##\n  affinity: {}\n  ## @param
      secondary.nodeSelector Node labels for MySQL secondary pods assignment\n 
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n 
      nodeSelector: {}\n  ## @param secondary.tolerations Tolerations for MySQL
      secondary pods assignment\n  ## ref:
      https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n 
      ##\n  tolerations: []\n  ## @param secondary.priorityClassName MySQL
      secondary pods' priorityClassName\n  ##\n  priorityClassName: \"\"\n  ##
      @param secondary.runtimeClassName MySQL secondary pods'
      runtimeClassName\n  ##\n  runtimeClassName: \"\"\n  ## @param
      secondary.schedulerName Name of the k8s scheduler (other than default)\n 
      ## ref:
      https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\n 
      ##\n  schedulerName: \"\"\n  ## @param
      secondary.terminationGracePeriodSeconds In seconds, time the given to the
      MySQL secondary pod needs to terminate gracefully\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods\n 
      ##\n  terminationGracePeriodSeconds: \"\"\n  ## @param
      secondary.topologySpreadConstraints Topology Spread Constraints for pod
      assignment\n  ##
      https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n 
      ## The value is evaluated as a template\n  ##\n 
      topologySpreadConstraints: []\n  ## @param secondary.podManagementPolicy
      podManagementPolicy to manage scaling operation of MySQL secondary pods\n 
      ## ref:
      https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies\n 
      ##\n  podManagementPolicy: \"\"\n  ## MySQL secondary Pod security
      context\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n 
      ## @param secondary.podSecurityContext.enabled Enable security context for
      MySQL secondary pods\n  ## @param secondary.podSecurityContext.fsGroup
      Group ID for the mounted volumes' filesystem\n  ##\n 
      podSecurityContext:\n    enabled: true\n    fsGroup: 1001\n  ## MySQL
      secondary container security context\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container\n 
      ## @param secondary.containerSecurityContext.enabled MySQL secondary
      container securityContext\n  ## @param
      secondary.containerSecurityContext.runAsUser User ID for the MySQL
      secondary container\n  ## @param
      secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary
      container's Security Context runAsNonRoot\n  ## @param
      secondary.containerSecurityContext.allowPrivilegeEscalation Set
      container's privilege escalation\n  ## @param
      secondary.containerSecurityContext.capabilities.drop Set container's
      Security Context runAsNonRoot\n  ## @param
      secondary.containerSecurityContext.seccompProfile.type Set container's
      Security Context seccomp profile\n  ##\n  containerSecurityContext:\n   
      enabled: true\n    runAsUser: 1001\n    runAsNonRoot: true\n   
      allowPrivilegeEscalation: false\n    capabilities:\n      drop:
      [\"ALL\"]\n    seccompProfile:\n      type: \"RuntimeDefault\"\n  ## MySQL
      secondary container's resource requests and limits\n  ## ref:
      https://kubernetes.io/docs/user-guide/compute-resources/\n  ## We usually
      recommend not to specify default resources and to leave this as a
      conscious\n  ## choice for the user. This also increases chances charts
      run on environments with little\n  ## resources, such as Minikube. If you
      do want to specify resources, uncomment the following\n  ## lines, adjust
      them as necessary, and remove the curly braces after 'resources:'.\n  ##
      @param secondary.resources.limits The resources limits for MySQL secondary
      containers\n  ## @param secondary.resources.requests The requested
      resources for MySQL secondary containers\n  ##\n  resources:\n    ##
      Example:\n    ## limits:\n    ##    cpu: 250m\n    ##    memory:
      256Mi\n    ##\n    limits: {}\n    ## Examples:\n    ## requests:\n   
      ##    cpu: 250m\n    ##    memory: 256Mi\n    ##\n    requests: {}\n  ##
      Configure extra options for liveness probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param secondary.livenessProbe.enabled Enable livenessProbe\n  ##
      @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds
      for livenessProbe\n  ## @param secondary.livenessProbe.periodSeconds
      Period seconds for livenessProbe\n  ## @param
      secondary.livenessProbe.timeoutSeconds Timeout seconds for
      livenessProbe\n  ## @param secondary.livenessProbe.failureThreshold
      Failure threshold for livenessProbe\n  ## @param
      secondary.livenessProbe.successThreshold Success threshold for
      livenessProbe\n  ##\n  livenessProbe:\n    enabled: true\n   
      initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      failureThreshold: 3\n    successThreshold: 1\n  ## Configure extra options
      for readiness probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param secondary.readinessProbe.enabled Enable readinessProbe\n  ##
      @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds
      for readinessProbe\n  ## @param secondary.readinessProbe.periodSeconds
      Period seconds for readinessProbe\n  ## @param
      secondary.readinessProbe.timeoutSeconds Timeout seconds for
      readinessProbe\n  ## @param secondary.readinessProbe.failureThreshold
      Failure threshold for readinessProbe\n  ## @param
      secondary.readinessProbe.successThreshold Success threshold for
      readinessProbe\n  ##\n  readinessProbe:\n    enabled: true\n   
      initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      failureThreshold: 3\n    successThreshold: 1\n  ## Configure extra options
      for startupProbe probe\n  ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n 
      ## @param secondary.startupProbe.enabled Enable startupProbe\n  ## @param
      secondary.startupProbe.initialDelaySeconds Initial delay seconds for
      startupProbe\n  ## @param secondary.startupProbe.periodSeconds Period
      seconds for startupProbe\n  ## @param
      secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe\n 
      ## @param secondary.startupProbe.failureThreshold Failure threshold for
      startupProbe\n  ## @param secondary.startupProbe.successThreshold Success
      threshold for startupProbe\n  ##\n  startupProbe:\n    enabled: true\n   
      initialDelaySeconds: 15\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      failureThreshold: 15\n    successThreshold: 1\n  ## @param
      secondary.customLivenessProbe Override default liveness probe for MySQL
      secondary containers\n  ##\n  customLivenessProbe: {}\n  ## @param
      secondary.customReadinessProbe Override default readiness probe for MySQL
      secondary containers\n  ##\n  customReadinessProbe: {}\n  ## @param
      secondary.customStartupProbe Override default startup probe for MySQL
      secondary containers\n  ##\n  customStartupProbe: {}\n  ## @param
      secondary.extraFlags MySQL secondary additional command line flags\n  ##
      Can be used to specify command line flags, for example:\n  ## E.g.\n  ##
      extraFlags: \"--max-connect-errors=1000 --max_connections=155\"\n  ##\n 
      extraFlags: \"\"\n  ## @param secondary.extraEnvVars An array to add extra
      environment variables on MySQL secondary containers\n  ## E.g.\n  ##
      extraEnvVars:\n  ##  - name: TZ\n  ##    value: \"Europe/Paris\"\n  ##\n 
      extraEnvVars: []\n  ## @param secondary.extraEnvVarsCM Name of existing
      ConfigMap containing extra env vars for MySQL secondary containers\n 
      ##\n  extraEnvVarsCM: \"\"\n  ## @param secondary.extraEnvVarsSecret Name
      of existing Secret containing extra env vars for MySQL secondary
      containers\n  ##\n  extraEnvVarsSecret: \"\"\n  ## @param
      secondary.extraPorts Extra ports to expose\n  ##\n  extraPorts: []\n  ##
      Enable persistence using Persistent Volume Claims\n  ## ref:
      https://kubernetes.io/docs/user-guide/persistent-volumes/\n  ##\n 
      persistence:\n    ## @param secondary.persistence.enabled Enable
      persistence on MySQL secondary replicas using a
      `PersistentVolumeClaim`\n    ##\n    enabled: true\n    ## @param
      secondary.persistence.existingClaim Name of an existing
      `PersistentVolumeClaim` for MySQL secondary replicas\n    ## NOTE: When
      it's set the rest of persistence parameters are ignored\n    ##\n   
      existingClaim: \"\"\n    ## @param secondary.persistence.subPath The name
      of a volume's sub path to mount for persistence\n    ##\n    subPath:
      \"\"\n    ## @param secondary.persistence.storageClass MySQL secondary
      persistent volume storage Class\n    ## If defined, storageClassName:
      \u003cstorageClass\u003e\n    ## If set to \"-\", storageClassName: \"\",
      which disables dynamic provisioning\n    ## If undefined (the default) or
      set to null, no storageClassName spec is\n    ##   set, choosing the
      default provisioner.  (gp2 on AWS, standard on\n    ##   GKE, AWS \u0026
      OpenStack)\n    ##\n    storageClass: \"\"\n    ## @param
      secondary.persistence.annotations MySQL secondary persistent volume claim
      annotations\n    ##\n    annotations: {}\n    ## @param
      secondary.persistence.accessModes MySQL secondary persistent volume access
      Modes\n    ##\n    accessModes:\n      - ReadWriteOnce\n    ## @param
      secondary.persistence.size MySQL secondary persistent volume size\n   
      ##\n    size: 8Gi\n    ## @param secondary.persistence.selector Selector
      to match an existing Persistent Volume\n    ## selector:\n    ##  
      matchLabels:\n    ##     app: my-app\n    ##\n    selector: {}\n  ##
      @param secondary.extraVolumes Optionally specify extra list of additional
      volumes to the MySQL secondary pod(s)\n  ##\n  extraVolumes: []\n  ##
      @param secondary.extraVolumeMounts Optionally specify extra list of
      additional volumeMounts for the MySQL secondary container(s)\n  ##\n 
      extraVolumeMounts: []\n  ## @param secondary.initContainers Add additional
      init containers for the MySQL secondary pod(s)\n  ##\n  initContainers:
      []\n  ## @param secondary.sidecars Add additional sidecar containers for
      the MySQL secondary pod(s)\n  ##\n  sidecars: []\n  ## MySQL Secondary
      Service parameters\n  ##\n  service:\n    ## @param secondary.service.type
      MySQL secondary Kubernetes service type\n    ##\n    type: ClusterIP\n   
      ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service
      port\n    ##\n    ports:\n      mysql: 3306\n    ## @param
      secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node
      port\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n   
      ##\n    nodePorts:\n      mysql: \"\"\n    ## @param
      secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP
      IP\n    ## e.g:\n    ## clusterIP: None\n    ##\n    clusterIP: \"\"\n   
      ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP
      if service type is `LoadBalancer`\n    ## Set the LoadBalancer service
      type to internal only\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n   
      ##\n    loadBalancerIP: \"\"\n    ## @param
      secondary.service.externalTrafficPolicy Enable client source IP
      preservation\n    ## ref
      https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n   
      ##\n    externalTrafficPolicy: Cluster\n    ## @param
      secondary.service.loadBalancerSourceRanges Addresses that are allowed when
      MySQL secondary service is LoadBalancer\n    ##
      https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n   
      ## E.g.\n    ## loadBalancerSourceRanges:\n    ##   - 10.10.10.0/24\n   
      ##\n    loadBalancerSourceRanges: []\n    ## @param
      secondary.service.extraPorts Extra ports to expose (normally used with the
      `sidecar` value)\n    ##\n    extraPorts: []\n    ## @param
      secondary.service.annotations Additional custom annotations for MySQL
      secondary service\n    ##\n    annotations: {}\n    ## @param
      secondary.service.sessionAffinity Session Affinity for Kubernetes service,
      can be \"None\" or \"ClientIP\"\n    ## If \"ClientIP\", consecutive
      client requests will be directed to the same Pod\n    ## ref:
      https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n   
      ##\n    sessionAffinity: None\n    ## @param
      secondary.service.sessionAffinityConfig Additional settings for the
      sessionAffinity\n    ## sessionAffinityConfig:\n    ##   clientIP:\n   
      ##     timeoutSeconds: 300\n    ##\n    sessionAffinityConfig: {}\n    ##
      Headless service properties\n    ##\n    headless:\n      ## @param
      secondary.service.headless.annotations Additional custom annotations for
      headless MySQL secondary service.\n      ##\n      annotations: {}\n\n  ##
      MySQL secondary Pod Disruption Budget configuration\n  ## ref:
      https://kubernetes.io/docs/tasks/run-application/configure-pdb/\n  ##\n 
      pdb:\n    ## @param secondary.pdb.create Enable/disable a Pod Disruption
      Budget creation for MySQL secondary pods\n    ##\n    create: false\n   
      ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL
      secondary pods that should remain scheduled\n    ##\n    minAvailable:
      1\n    ## @param secondary.pdb.maxUnavailable Maximum number/percentage of
      MySQL secondary pods that may be made unavailable\n    ##\n   
      maxUnavailable: \"\"\n  ## @param secondary.podLabels Additional pod
      labels for MySQL secondary pods\n  ##\n  podLabels: {}\n\n## @section RBAC
      parameters\n##\n\n## MySQL pods ServiceAccount\n## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n##\nserviceAccount:\n 
      ## @param serviceAccount.create Enable the creation of a ServiceAccount
      for MySQL pods\n  ##\n  create: true\n  ## @param serviceAccount.name Name
      of the created ServiceAccount\n  ## If not set and create is true, a name
      is generated using the mysql.fullname template\n  ##\n  name: \"\"\n  ##
      @param serviceAccount.annotations Annotations for MySQL Service Account\n 
      ##\n  annotations: {}\n  ## @param
      serviceAccount.automountServiceAccountToken Automount service account
      token for the server service account\n  ##\n 
      automountServiceAccountToken: true\n\n## Role Based Access\n## ref:
      https://kubernetes.io/docs/admin/authorization/rbac/\n##\nrbac:\n  ##
      @param rbac.create Whether to create \u0026 use RBAC resources or not\n 
      ##\n  create: false\n  ## @param rbac.rules Custom RBAC rules to set\n  ##
      e.g:\n  ## rules:\n  ##   - apiGroups:\n  ##       - \"\"\n  ##    
      resources:\n  ##       - pods\n  ##     verbs:\n  ##       - get\n 
      ##       - list\n  ##\n  rules: []\n\n## @section Network Policy\n##\n\n##
      MySQL Nework Policy configuration\n##\nnetworkPolicy:\n  ## @param
      networkPolicy.enabled Enable creation of NetworkPolicy resources\n  ##\n 
      enabled: false\n  ## @param networkPolicy.allowExternal The Policy model
      to apply.\n  ## When set to false, only pods with the correct\n  ## client
      label will have network access to the port MySQL is listening\n  ## on.
      When true, MySQL will accept connections from any source\n  ## (with the
      correct destination port).\n  ##\n  allowExternal: true\n  ## @param
      networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to
      explicitly select namespaces from which ingress traffic could be allowed
      to MySQL\n  ## If explicitNamespacesSelector is missing or set to {}, only
      client Pods that are in the networkPolicy's namespace\n  ## and that match
      other criteria, the ones that have the good label, can reach the DB.\n  ##
      But sometimes, we want the DB to be accessible to clients from other
      namespaces, in this case, we can use this\n  ## LabelSelector to select
      these namespaces, note that the networkPolicy's namespace should also be
      explicitly added.\n  ##\n  ## Example:\n  ##
      explicitNamespacesSelector:\n  ##   matchLabels:\n  ##     role:
      frontend\n  ##   matchExpressions:\n  ##    - {key: role, operator: In,
      values: [frontend]}\n  ##\n  explicitNamespacesSelector: {}\n\n## @section
      Volume Permissions parameters\n##\n\n## Init containers parameters:\n##
      volumePermissions: Change the owner and group of the persistent volume
      mountpoint to runAsUser:fsGroup values from the securityContext
      section.\n##\nvolumePermissions:\n  ## @param volumePermissions.enabled
      Enable init container that changes the owner and group of the persistent
      volume(s) mountpoint to `runAsUser:fsGroup`\n  ##\n  enabled: false\n  ##
      @param volumePermissions.image.registry [default: REGISTRY_NAME] Init
      container volume-permissions image registry\n  ## @param
      volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell]
      Init container volume-permissions image repository\n  ## @skip
      volumePermissions.image.tag Init container volume-permissions image tag
      (immutable tags are recommended)\n  ## @param
      volumePermissions.image.digest Init container volume-permissions image
      digest in the way sha256:aa.... Please note this parameter, if set, will
      override the tag\n  ## @param volumePermissions.image.pullPolicy Init
      container volume-permissions image pull policy\n  ## @param
      volumePermissions.image.pullSecrets Specify docker-registry secret names
      as an array\n  ##\n  image:\n    registry: docker.io\n    repository:
      bitnami/os-shell\n    tag: 11-debian-11-r90\n    digest: \"\"\n   
      pullPolicy: IfNotPresent\n    ## Optionally specify an array of
      imagePullSecrets.\n    ## Secrets must be manually created in the
      namespace.\n    ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n   
      ## e.g:\n    ## pullSecrets:\n    ##   - myRegistryKeySecretName\n   
      ##\n    pullSecrets: []\n  ## @param volumePermissions.resources Init
      container volume-permissions resources\n  ##\n  resources: {}\n\n##
      @section Metrics parameters\n##\n\n## Mysqld Prometheus exporter
      parameters\n##\nmetrics:\n  ## @param metrics.enabled Start a side-car
      prometheus exporter\n  ##\n  enabled: false\n  ## @param
      metrics.image.registry [default: REGISTRY_NAME] Exporter image registry\n 
      ## @param metrics.image.repository [default:
      REPOSITORY_NAME/mysqld-exporter] Exporter image repository\n  ## @skip
      metrics.image.tag Exporter image tag (immutable tags are recommended)\n 
      ## @param metrics.image.digest Exporter image digest in the way
      sha256:aa.... Please note this parameter, if set, will override the tag\n 
      ## @param metrics.image.pullPolicy Exporter image pull policy\n  ## @param
      metrics.image.pullSecrets Specify docker-registry secret names as an
      array\n  ##\n  image:\n    registry: docker.io\n    repository:
      bitnami/mysqld-exporter\n    tag: 0.15.0-debian-11-r70\n    digest:
      \"\"\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of
      imagePullSecrets.\n    ## Secrets must be manually created in the
      namespace.\n    ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n   
      ## e.g:\n    ## pullSecrets:\n    ##   - myRegistryKeySecretName\n   
      ##\n    pullSecrets: []\n  ## MySQL metrics container security context\n 
      ## ref:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container\n 
      ## @param metrics.containerSecurityContext.enabled MySQL metrics container
      securityContext\n  ## @param metrics.containerSecurityContext.runAsUser
      User ID for the MySQL metrics container\n  ## @param
      metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics
      container's Security Context runAsNonRoot\n  ##\n 
      containerSecurityContext:\n    enabled: true\n    runAsUser: 1001\n   
      runAsNonRoot: true\n  ## MySQL Prometheus exporter service parameters\n 
      ## Mysqld Prometheus exporter liveness and readiness probes\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n 
      ## @param metrics.service.type Kubernetes service type for MySQL
      Prometheus Exporter\n  ## @param metrics.service.clusterIP Kubernetes
      service clusterIP for MySQL Prometheus Exporter\n  ## @param
      metrics.service.port MySQL Prometheus Exporter service port\n  ## @param
      metrics.service.annotations [object] Prometheus exporter service
      annotations\n  ##\n  service:\n    type: ClusterIP\n    port: 9104\n   
      clusterIP: \"\"\n    annotations:\n      prometheus.io/scrape:
      \"true\"\n      prometheus.io/port: \"{{ .Values.metrics.service.port
      }}\"\n  ## @param metrics.extraArgs.primary Extra args to be passed to
      mysqld_exporter on Primary pods\n  ## @param metrics.extraArgs.secondary
      Extra args to be passed to mysqld_exporter on Secondary pods\n  ## ref:
      https://github.com/prometheus/mysqld_exporter/\n  ## E.g.\n  ## -
      --collect.auto_increment.columns\n  ## - --collect.binlog_size\n  ## -
      --collect.engine_innodb_status\n  ## - --collect.engine_tokudb_status\n 
      ## - --collect.global_status\n  ## - --collect.global_variables\n  ## -
      --collect.info_schema.clientstats\n  ## -
      --collect.info_schema.innodb_metrics\n  ## -
      --collect.info_schema.innodb_tablespaces\n  ## -
      --collect.info_schema.innodb_cmp\n  ## -
      --collect.info_schema.innodb_cmpmem\n  ## -
      --collect.info_schema.processlist\n  ## -
      --collect.info_schema.processlist.min_time\n  ## -
      --collect.info_schema.query_response_time\n  ## -
      --collect.info_schema.tables\n  ## -
      --collect.info_schema.tables.databases\n  ## -
      --collect.info_schema.tablestats\n  ## -
      --collect.info_schema.userstats\n  ## -
      --collect.perf_schema.eventsstatements\n  ## -
      --collect.perf_schema.eventsstatements.digest_text_limit\n  ## -
      --collect.perf_schema.eventsstatements.limit\n  ## -
      --collect.perf_schema.eventsstatements.timelimit\n  ## -
      --collect.perf_schema.eventswaits\n  ## -
      --collect.perf_schema.file_events\n  ## -
      --collect.perf_schema.file_instances\n  ## -
      --collect.perf_schema.indexiowaits\n  ## -
      --collect.perf_schema.tableiowaits\n  ## -
      --collect.perf_schema.tablelocks\n  ## -
      --collect.perf_schema.replication_group_member_stats\n  ## -
      --collect.slave_status\n  ## - --collect.slave_hosts\n  ## -
      --collect.heartbeat\n  ## - --collect.heartbeat.database\n  ## -
      --collect.heartbeat.table\n  ##\n  extraArgs:\n    primary: []\n   
      secondary: []\n  ## Mysqld Prometheus exporter resource requests and
      limits\n  ## ref:
      https://kubernetes.io/docs/user-guide/compute-resources/\n  ## We usually
      recommend not to specify default resources and to leave this as a
      conscious\n  ## choice for the user. This also increases chances charts
      run on environments with little\n  ## resources, such as Minikube. If you
      do want to specify resources, uncomment the following\n  ## lines, adjust
      them as necessary, and remove the curly braces after 'resources:'.\n  ##
      @param metrics.resources.limits The resources limits for MySQL prometheus
      exporter containers\n  ## @param metrics.resources.requests The requested
      resources for MySQL prometheus exporter containers\n  ##\n 
      resources:\n    ## Example:\n    ## limits:\n    ##    cpu: 100m\n   
      ##    memory: 256Mi\n    ##\n    limits: {}\n    ## Examples:\n    ##
      requests:\n    ##    cpu: 100m\n    ##    memory: 256Mi\n    ##\n   
      requests: {}\n  ## Mysqld Prometheus exporter liveness probe\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n 
      ## @param metrics.livenessProbe.enabled Enable livenessProbe\n  ## @param
      metrics.livenessProbe.initialDelaySeconds Initial delay seconds for
      livenessProbe\n  ## @param metrics.livenessProbe.periodSeconds Period
      seconds for livenessProbe\n  ## @param
      metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n 
      ## @param metrics.livenessProbe.failureThreshold Failure threshold for
      livenessProbe\n  ## @param metrics.livenessProbe.successThreshold Success
      threshold for livenessProbe\n  ##\n  livenessProbe:\n    enabled:
      true\n    initialDelaySeconds: 120\n    periodSeconds: 10\n   
      timeoutSeconds: 1\n    successThreshold: 1\n    failureThreshold: 3\n  ##
      Mysqld Prometheus exporter readiness probe\n  ## ref:
      https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n 
      ## @param metrics.readinessProbe.enabled Enable readinessProbe\n  ##
      @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds
      for readinessProbe\n  ## @param metrics.readinessProbe.periodSeconds
      Period seconds for readinessProbe\n  ## @param
      metrics.readinessProbe.timeoutSeconds Timeout seconds for
      readinessProbe\n  ## @param metrics.readinessProbe.failureThreshold
      Failure threshold for readinessProbe\n  ## @param
      metrics.readinessProbe.successThreshold Success threshold for
      readinessProbe\n  ##\n  readinessProbe:\n    enabled: true\n   
      initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 1\n   
      successThreshold: 1\n    failureThreshold: 3\n  ## Prometheus Service
      Monitor\n  ## ref: https://github.com/coreos/prometheus-operator\n  ##\n 
      serviceMonitor:\n    ## @param metrics.serviceMonitor.enabled Create
      ServiceMonitor Resource for scraping metrics using PrometheusOperator\n   
      ##\n    enabled: false\n    ## @param metrics.serviceMonitor.namespace
      Specify the namespace in which the serviceMonitor resource will be
      created\n    ##\n    namespace: \"\"\n    ## @param
      metrics.serviceMonitor.jobLabel The name of the label on the target
      service to use as the job name in prometheus.\n    ##\n    jobLabel:
      \"\"\n    ## @param metrics.serviceMonitor.interval Specify the interval
      at which metrics should be scraped\n    ##\n    interval: 30s\n    ##
      @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after
      which the scrape is ended\n    ## e.g:\n    ## scrapeTimeout: 30s\n   
      ##\n    scrapeTimeout: \"\"\n    ## @param
      metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples
      before scraping\n    ## ref:
      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig\n   
      ##\n    relabelings: []\n    ## @param
      metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to
      samples before ingestion\n    ## ref:
      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig\n   
      ##\n    metricRelabelings: []\n    ## @param
      metrics.serviceMonitor.selector ServiceMonitor selector labels\n    ##
      ref:
      https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration\n   
      ##\n    ## selector:\n    ##   prometheus: my-prometheus\n    ##\n   
      selector: {}\n    ## @param metrics.serviceMonitor.honorLabels Specify
      honorLabels parameter to add the scrape endpoint\n    ##\n    honorLabels:
      false\n    ## @param metrics.serviceMonitor.labels Used to pass Labels
      that are used by the Prometheus installed in your cluster to select
      Service Monitors to work with\n    ## ref:
      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec\n   
      ##\n    labels: {}\n    ## @param metrics.serviceMonitor.annotations
      ServiceMonitor annotations\n    ##\n    annotations: {}\n\n  ## Prometheus
      Operator prometheusRule configuration\n  ##\n  prometheusRule:\n    ##
      @param metrics.prometheusRule.enabled Creates a Prometheus Operator
      prometheusRule (also requires `metrics.enabled` to be `true` and
      `metrics.prometheusRule.rules`)\n    ##\n    enabled: false\n    ## @param
      metrics.prometheusRule.namespace Namespace for the prometheusRule Resource
      (defaults to the Release Namespace)\n    ##\n    namespace: \"\"\n    ##
      @param metrics.prometheusRule.additionalLabels Additional labels that can
      be used so prometheusRule will be discovered by Prometheus\n    ##\n   
      additionalLabels: {}\n    ## @param metrics.prometheusRule.rules
      Prometheus Rule definitions\n    ##  - alert: Mysql-Down\n    ##    expr:
      absent(up{job=\"mysql\"} == 1)\n    ##    for: 5m\n    ##    labels:\n   
      ##      severity: warning\n    ##      service: mariadb\n    ##   
      annotations:\n    ##      message: 'MariaDB instance {{`{{`}}
      $labels.instance {{`}}`}}  is down'\n    ##      summary: MariaDB instance
      is down\n    ##\n    rules:
      []\n"},"repoURL":"https://charts.bitnami.com/bitnami","targetRevision":"9.14.3"}}}
  creationTimestamp: '2023-11-12T05:56:16Z'
  generation: 34
  managedFields:
    - apiVersion: argoproj.io/v1alpha1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          .: {}
          f:destination:
            .: {}
            f:namespace: {}
            f:server: {}
          f:project: {}
          f:source:
            .: {}
            f:chart: {}
            f:helm:
              .: {}
              f:parameters: {}
            f:repoURL: {}
            f:targetRevision: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: '2023-11-12T05:56:16Z'
    - apiVersion: argoproj.io/v1alpha1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:source:
            f:helm:
              f:values: {}
        f:status:
          f:summary: {}
      manager: argocd-server
      operation: Update
      time: '2023-11-12T06:09:57Z'
    - apiVersion: argoproj.io/v1alpha1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          .: {}
          f:controllerNamespace: {}
          f:health:
            .: {}
            f:status: {}
          f:history: {}
          f:operationState:
            .: {}
            f:finishedAt: {}
            f:message: {}
            f:operation:
              .: {}
              f:initiatedBy:
                .: {}
                f:username: {}
              f:retry: {}
              f:sync:
                .: {}
                f:revision: {}
                f:syncStrategy:
                  .: {}
                  f:hook: {}
            f:phase: {}
            f:startedAt: {}
            f:syncResult:
              .: {}
              f:resources: {}
              f:revision: {}
              f:source:
                .: {}
                f:chart: {}
                f:helm:
                  .: {}
                  f:parameters: {}
                  f:values: {}
                f:repoURL: {}
                f:targetRevision: {}
          f:reconciledAt: {}
          f:resources: {}
          f:sourceType: {}
          f:summary:
            f:images: {}
          f:sync:
            .: {}
            f:comparedTo:
              .: {}
              f:destination:
                .: {}
                f:namespace: {}
                f:server: {}
              f:source:
                .: {}
                f:chart: {}
                f:helm:
                  .: {}
                  f:parameters: {}
                  f:values: {}
                f:repoURL: {}
                f:targetRevision: {}
            f:revision: {}
            f:status: {}
      manager: argocd-application-controller
      operation: Update
      time: '2023-11-12T07:11:13Z'
  name: pimcore-sbx-mysql
  namespace: argo-cd
  resourceVersion: '748652031'
  uid: 47ff6e2b-341d-40c3-9c8e-afd2b956d8e3
  selfLink: /apis/argoproj.io/v1alpha1/namespaces/argo-cd/applications/pimcore-sbx-mysql
status:
  controllerNamespace: argo-cd
  health:
    status: Healthy
  history:
    - deployStartedAt: '2023-11-12T05:56:43Z'
      deployedAt: '2023-11-12T05:56:46Z'
      id: 0
      revision: 9.14.3
      source:
        chart: mysql
        helm:
          parameters:
            - name: auth.database
              value: pimcore
            - name: auth.password
              value: pimcore
            - name: auth.rootPassword
              value: pimcore
            - name: auth.username
              value: pimcore
          values: >
            # Copyright VMware, Inc.

            # SPDX-License-Identifier: APACHE-2.0


            ## @section Global parameters

            ## Global Docker image parameters

            ## Please, note that this will override the image parameters,
            including dependencies, configured to use the global value

            ## Current available global Docker image parameters: imageRegistry,
            imagePullSecrets and storageClass

            ##


            ## @param global.imageRegistry Global Docker image registry

            ## @param global.imagePullSecrets Global Docker registry secret
            names as an array

            ## @param global.storageClass Global StorageClass for Persistent
            Volume(s)

            ##

            global:
              imageRegistry: ""
              ## E.g.
              ## imagePullSecrets:
              ##   - myRegistryKeySecretName
              ##
              imagePullSecrets: []
              storageClass: ""

            ## @section Common parameters

            ##


            ## @param kubeVersion Force target Kubernetes version (using Helm
            capabilities if not set)

            ##

            kubeVersion: ""

            ## @param nameOverride String to partially override
            common.names.fullname template (will maintain the release name)

            ##

            nameOverride: ""

            ## @param fullnameOverride String to fully override
            common.names.fullname template

            ##

            fullnameOverride: ""

            ## @param namespaceOverride String to fully override
            common.names.namespace

            ##

            namespaceOverride: ""

            ## @param clusterDomain Cluster domain

            ##

            clusterDomain: cluster.local

            ## @param commonAnnotations Common annotations to add to all MySQL
            resources (sub-charts are not considered). Evaluated as a template

            ##

            commonAnnotations: {}

            ## @param commonLabels Common labels to add to all MySQL resources
            (sub-charts are not considered). Evaluated as a template

            ##

            commonLabels: {}

            ## @param extraDeploy Array with extra yaml to deploy with the
            chart. Evaluated as a template

            ##

            extraDeploy: []


            ## @param serviceBindings.enabled Create secret for service binding
            (Experimental)

            ## Ref: https://servicebinding.io/service-provider/

            ##

            serviceBindings:
              enabled: false

            ## Enable diagnostic mode in the deployment

            ##

            diagnosticMode:
              ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
              ##
              enabled: false
              ## @param diagnosticMode.command Command to override all containers in the deployment
              ##
              command:
                - sleep
              ## @param diagnosticMode.args Args to override all containers in the deployment
              ##
              args:
                - infinity

            ## @section MySQL common parameters

            ##


            ## Bitnami MySQL image

            ## ref: https://hub.docker.com/r/bitnami/mysql/tags/

            ## @param image.registry [default: REGISTRY_NAME] MySQL image
            registry

            ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL
            image repository

            ## @skip image.tag MySQL image tag (immutable tags are recommended)

            ## @param image.digest MySQL image digest in the way sha256:aa....
            Please note this parameter, if set, will override the tag

            ## @param image.pullPolicy MySQL image pull policy

            ## @param image.pullSecrets Specify docker-registry secret names as
            an array

            ## @param image.debug Specify if debug logs should be enabled

            ##

            image:
              registry: docker.io
              repository: bitnami/mysql
              tag: 8.0.35-debian-11-r0
              digest: ""
              ## Specify a imagePullPolicy
              ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
              ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
              ##
              pullPolicy: IfNotPresent
              ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
              ## Example:
              ## pullSecrets:
              ##   - myRegistryKeySecretName
              ##
              pullSecrets: []
              ## Set to true if you would like to see extra information on logs
              ## It turns BASH and/or NAMI debugging in the image
              ##
              debug: false
            ## @param architecture MySQL architecture (`standalone` or
            `replication`)

            ##

            architecture: standalone

            ## MySQL Authentication parameters

            ##

            auth:
              ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
              ##
              rootPassword: ""
              ## @param auth.createDatabase Whether to create the .Values.auth.database or not
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              createDatabase: true
              ## @param auth.database Name for a custom database to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              database: "my_database"
              ## @param auth.username Name for a custom user to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
              ##
              username: ""
              ## @param auth.password Password for the new user. Ignored if existing secret is provided
              ##
              password: ""
              ## @param auth.replicationUser MySQL replication user
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
              ##
              replicationUser: replicator
              ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
              ##
              replicationPassword: ""
              ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
              ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
              ##
              existingSecret: ""
              ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
              ##
              usePasswordFiles: false
              ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
              ## Example:
              ## customPasswordFiles:
              ##   root: /vault/secrets/mysql-root
              ##   user: /vault/secrets/mysql-user
              ##   replicator: /vault/secrets/mysql-replicator
              ##
              customPasswordFiles: {}
              ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
              ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
              ##
              defaultAuthenticationPlugin: ""
            ## @param initdbScripts Dictionary of initdb scripts

            ## Specify dictionary of scripts to be run at first boot

            ## Example:

            ## initdbScripts:

            ##   my_init_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            initdbScripts: {}

            ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts
            (Note: Overrides `initdbScripts`)

            ##

            initdbScriptsConfigMap: ""

            ## @param startdbScripts Dictionary of startdb scripts

            ## Specify dictionary of scripts to be run every time the container
            is started

            ## Example:

            ## startdbScripts:

            ##   my_start_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            startdbScripts: {}

            ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts
            (Note: Overrides `startdbScripts`)

            ##

            startdbScriptsConfigMap: ""


            ## @section MySQL Primary parameters

            ##


            primary:
              ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
              ##
              name: primary
              ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
              ##
              command: []
              ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
              ##
              args: []
              ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param primary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAntiAffinityPreset: soft
              ## MySQL Primary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param primary.affinity Affinity for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param primary.tolerations Tolerations for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param primary.priorityClassName MySQL primary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param primary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL primary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
              ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL primary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
              ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
              ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL primary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param primary.resources.limits The resources limits for MySQL primary containers
              ## @param primary.resources.requests The requested resources for MySQL primary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.livenessProbe.enabled Enable livenessProbe
              ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.readinessProbe.enabled Enable readinessProbe
              ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.startupProbe.enabled Enable startupProbe
              ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 10
                successThreshold: 1
              ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
              ##
              customLivenessProbe: {}
              ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
              ##
              customReadinessProbe: {}
              ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
              ##
              customStartupProbe: {}
              ## @param primary.extraFlags MySQL primary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsCM: ""
              ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsSecret: ""
              ## @param primary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
                ##
                enabled: true
                ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
                ##
                annotations: {}
                ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param primary.persistence.size MySQL primary persistent volume size
                ##
                size: 8Gi
                ## @param primary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
              ##
              extraVolumes: []
              ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
              ##
              extraVolumeMounts: []
              ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
              ##
              initContainers: []
              ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
              ##
              sidecars: []
              ## MySQL Primary Service parameters
              ##
              service:
                ## @param primary.service.type MySQL Primary K8s service type
                ##
                type: ClusterIP
                ## @param primary.service.ports.mysql MySQL Primary K8s service port
                ##
                ports:
                  mysql: 3306
                ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param primary.service.annotations Additional custom annotations for MySQL primary service
                ##
                annotations: {}
                ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
                  ##
                  annotations: {}

              ## MySQL primary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
                ##
                create: false
                ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
              ##
              podLabels: {}

            ## @section MySQL Secondary parameters

            ##


            secondary:
              ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
              ##
              name: secondary
              ## @param secondary.replicaCount Number of MySQL secondary replicas
              ##
              replicaCount: 1
              ## @param secondary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
              ##
              command: []
              ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
              ##
              args: []
              ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin=mysql_native_password
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ## Allowed values: soft, hard
              ##
              podAntiAffinityPreset: soft
              ## MySQL Secondary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param secondary.affinity Affinity for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL secondary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
              ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL secondary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
              ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
              ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL secondary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param secondary.resources.limits The resources limits for MySQL secondary containers
              ## @param secondary.resources.requests The requested resources for MySQL secondary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.livenessProbe.enabled Enable livenessProbe
              ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.readinessProbe.enabled Enable readinessProbe
              ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.startupProbe.enabled Enable startupProbe
              ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 15
                successThreshold: 1
              ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
              ##
              customLivenessProbe: {}
              ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
              ##
              customReadinessProbe: {}
              ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
              ##
              customStartupProbe: {}
              ## @param secondary.extraFlags MySQL secondary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsCM: ""
              ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsSecret: ""
              ## @param secondary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
                ##
                enabled: true
                ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
                ##
                annotations: {}
                ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param secondary.persistence.size MySQL secondary persistent volume size
                ##
                size: 8Gi
                ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
              ##
              extraVolumes: []
              ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
              ##
              extraVolumeMounts: []
              ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
              ##
              initContainers: []
              ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
              ##
              sidecars: []
              ## MySQL Secondary Service parameters
              ##
              service:
                ## @param secondary.service.type MySQL secondary Kubernetes service type
                ##
                type: ClusterIP
                ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
                ##
                ports:
                  mysql: 3306
                ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
                ##
                annotations: {}
                ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
                  ##
                  annotations: {}

              ## MySQL secondary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
                ##
                create: false
                ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
              ##
              podLabels: {}

            ## @section RBAC parameters

            ##


            ## MySQL pods ServiceAccount

            ## ref:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

            ##

            serviceAccount:
              ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
              ##
              create: true
              ## @param serviceAccount.name Name of the created ServiceAccount
              ## If not set and create is true, a name is generated using the mysql.fullname template
              ##
              name: ""
              ## @param serviceAccount.annotations Annotations for MySQL Service Account
              ##
              annotations: {}
              ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
              ##
              automountServiceAccountToken: true

            ## Role Based Access

            ## ref: https://kubernetes.io/docs/admin/authorization/rbac/

            ##

            rbac:
              ## @param rbac.create Whether to create & use RBAC resources or not
              ##
              create: false
              ## @param rbac.rules Custom RBAC rules to set
              ## e.g:
              ## rules:
              ##   - apiGroups:
              ##       - ""
              ##     resources:
              ##       - pods
              ##     verbs:
              ##       - get
              ##       - list
              ##
              rules: []

            ## @section Network Policy

            ##


            ## MySQL Nework Policy configuration

            ##

            networkPolicy:
              ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
              ##
              enabled: false
              ## @param networkPolicy.allowExternal The Policy model to apply.
              ## When set to false, only pods with the correct
              ## client label will have network access to the port MySQL is listening
              ## on. When true, MySQL will accept connections from any source
              ## (with the correct destination port).
              ##
              allowExternal: true
              ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
              ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
              ## and that match other criteria, the ones that have the good label, can reach the DB.
              ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
              ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
              ##
              ## Example:
              ## explicitNamespacesSelector:
              ##   matchLabels:
              ##     role: frontend
              ##   matchExpressions:
              ##    - {key: role, operator: In, values: [frontend]}
              ##
              explicitNamespacesSelector: {}

            ## @section Volume Permissions parameters

            ##


            ## Init containers parameters:

            ## volumePermissions: Change the owner and group of the persistent
            volume mountpoint to runAsUser:fsGroup values from the
            securityContext section.

            ##

            volumePermissions:
              ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
              ##
              enabled: false
              ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
              ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
              ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
              ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
              ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/os-shell
                tag: 11-debian-11-r90
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## @param volumePermissions.resources Init container volume-permissions resources
              ##
              resources: {}

            ## @section Metrics parameters

            ##


            ## Mysqld Prometheus exporter parameters

            ##

            metrics:
              ## @param metrics.enabled Start a side-car prometheus exporter
              ##
              enabled: false
              ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
              ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
              ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
              ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param metrics.image.pullPolicy Exporter image pull policy
              ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/mysqld-exporter
                tag: 0.15.0-debian-11-r70
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## MySQL metrics container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
              ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
              ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
              ## MySQL Prometheus exporter service parameters
              ## Mysqld Prometheus exporter liveness and readiness probes
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
              ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
              ## @param metrics.service.port MySQL Prometheus Exporter service port
              ## @param metrics.service.annotations [object] Prometheus exporter service annotations
              ##
              service:
                type: ClusterIP
                port: 9104
                clusterIP: ""
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "{{ .Values.metrics.service.port }}"
              ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
              ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
              ## ref: https://github.com/prometheus/mysqld_exporter/
              ## E.g.
              ## - --collect.auto_increment.columns
              ## - --collect.binlog_size
              ## - --collect.engine_innodb_status
              ## - --collect.engine_tokudb_status
              ## - --collect.global_status
              ## - --collect.global_variables
              ## - --collect.info_schema.clientstats
              ## - --collect.info_schema.innodb_metrics
              ## - --collect.info_schema.innodb_tablespaces
              ## - --collect.info_schema.innodb_cmp
              ## - --collect.info_schema.innodb_cmpmem
              ## - --collect.info_schema.processlist
              ## - --collect.info_schema.processlist.min_time
              ## - --collect.info_schema.query_response_time
              ## - --collect.info_schema.tables
              ## - --collect.info_schema.tables.databases
              ## - --collect.info_schema.tablestats
              ## - --collect.info_schema.userstats
              ## - --collect.perf_schema.eventsstatements
              ## - --collect.perf_schema.eventsstatements.digest_text_limit
              ## - --collect.perf_schema.eventsstatements.limit
              ## - --collect.perf_schema.eventsstatements.timelimit
              ## - --collect.perf_schema.eventswaits
              ## - --collect.perf_schema.file_events
              ## - --collect.perf_schema.file_instances
              ## - --collect.perf_schema.indexiowaits
              ## - --collect.perf_schema.tableiowaits
              ## - --collect.perf_schema.tablelocks
              ## - --collect.perf_schema.replication_group_member_stats
              ## - --collect.slave_status
              ## - --collect.slave_hosts
              ## - --collect.heartbeat
              ## - --collect.heartbeat.database
              ## - --collect.heartbeat.table
              ##
              extraArgs:
                primary: []
                secondary: []
              ## Mysqld Prometheus exporter resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
              ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Mysqld Prometheus exporter liveness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.livenessProbe.enabled Enable livenessProbe
              ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 120
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Mysqld Prometheus exporter readiness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.readinessProbe.enabled Enable readinessProbe
              ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Prometheus Service Monitor
              ## ref: https://github.com/coreos/prometheus-operator
              ##
              serviceMonitor:
                ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
                ##
                enabled: false
                ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
                ##
                namespace: ""
                ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                ##
                jobLabel: ""
                ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
                ##
                interval: 30s
                ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
                ## e.g:
                ## scrapeTimeout: 30s
                ##
                scrapeTimeout: ""
                ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                relabelings: []
                ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                metricRelabelings: []
                ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
                ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                ##
                ## selector:
                ##   prometheus: my-prometheus
                ##
                selector: {}
                ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                ##
                honorLabels: false
                ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
                ##
                labels: {}
                ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
                ##
                annotations: {}

              ## Prometheus Operator prometheusRule configuration
              ##
              prometheusRule:
                ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
                ##
                enabled: false
                ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
                ##
                namespace: ""
                ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
                ##
                additionalLabels: {}
                ## @param metrics.prometheusRule.rules Prometheus Rule definitions
                ##  - alert: Mysql-Down
                ##    expr: absent(up{job="mysql"} == 1)
                ##    for: 5m
                ##    labels:
                ##      severity: warning
                ##      service: mariadb
                ##    annotations:
                ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
                ##      summary: MariaDB instance is down
                ##
                rules: []
        repoURL: https://charts.bitnami.com/bitnami
        targetRevision: 9.14.3
    - deployStartedAt: '2023-11-12T06:09:58Z'
      deployedAt: '2023-11-12T06:10:00Z'
      id: 1
      revision: 9.14.3
      source:
        chart: mysql
        helm:
          parameters:
            - name: auth.database
              value: pimcore
            - name: auth.password
              value: pimcore
            - name: auth.rootPassword
              value: pimcore
            - name: auth.username
              value: pimcore
          values: >
            # Copyright VMware, Inc.

            # SPDX-License-Identifier: APACHE-2.0


            ## @section Global parameters

            ## Global Docker image parameters

            ## Please, note that this will override the image parameters,
            including dependencies, configured to use the global value

            ## Current available global Docker image parameters: imageRegistry,
            imagePullSecrets and storageClass

            ##


            ## @param global.imageRegistry Global Docker image registry

            ## @param global.imagePullSecrets Global Docker registry secret
            names as an array

            ## @param global.storageClass Global StorageClass for Persistent
            Volume(s)

            ##

            global:
              imageRegistry: ""
              ## E.g.
              ## imagePullSecrets:
              ##   - myRegistryKeySecretName
              ##
              imagePullSecrets: []
              storageClass: ""

            ## @section Common parameters

            ##


            ## @param kubeVersion Force target Kubernetes version (using Helm
            capabilities if not set)

            ##

            kubeVersion: ""

            ## @param nameOverride String to partially override
            common.names.fullname template (will maintain the release name)

            ##

            nameOverride: ""

            ## @param fullnameOverride String to fully override
            common.names.fullname template

            ##

            fullnameOverride: ""

            ## @param namespaceOverride String to fully override
            common.names.namespace

            ##

            namespaceOverride: ""

            ## @param clusterDomain Cluster domain

            ##

            clusterDomain: cluster.local

            ## @param commonAnnotations Common annotations to add to all MySQL
            resources (sub-charts are not considered). Evaluated as a template

            ##

            commonAnnotations: {}

            ## @param commonLabels Common labels to add to all MySQL resources
            (sub-charts are not considered). Evaluated as a template

            ##

            commonLabels: {}

            ## @param extraDeploy Array with extra yaml to deploy with the
            chart. Evaluated as a template

            ##

            extraDeploy: []


            ## @param serviceBindings.enabled Create secret for service binding
            (Experimental)

            ## Ref: https://servicebinding.io/service-provider/

            ##

            serviceBindings:
              enabled: false

            ## Enable diagnostic mode in the deployment

            ##

            diagnosticMode:
              ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
              ##
              enabled: false
              ## @param diagnosticMode.command Command to override all containers in the deployment
              ##
              command:
                - sleep
              ## @param diagnosticMode.args Args to override all containers in the deployment
              ##
              args:
                - infinity

            ## @section MySQL common parameters

            ##


            ## Bitnami MySQL image

            ## ref: https://hub.docker.com/r/bitnami/mysql/tags/

            ## @param image.registry [default: REGISTRY_NAME] MySQL image
            registry

            ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL
            image repository

            ## @skip image.tag MySQL image tag (immutable tags are recommended)

            ## @param image.digest MySQL image digest in the way sha256:aa....
            Please note this parameter, if set, will override the tag

            ## @param image.pullPolicy MySQL image pull policy

            ## @param image.pullSecrets Specify docker-registry secret names as
            an array

            ## @param image.debug Specify if debug logs should be enabled

            ##

            image:
              registry: docker.io
              repository: bitnami/mysql
              tag: 8.0.35-debian-11-r0
              digest: ""
              ## Specify a imagePullPolicy
              ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
              ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
              ##
              pullPolicy: IfNotPresent
              ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
              ## Example:
              ## pullSecrets:
              ##   - myRegistryKeySecretName
              ##
              pullSecrets: []
              ## Set to true if you would like to see extra information on logs
              ## It turns BASH and/or NAMI debugging in the image
              ##
              debug: false
            ## @param architecture MySQL architecture (`standalone` or
            `replication`)

            ##

            architecture: standalone

            ## MySQL Authentication parameters

            ##

            auth:
              ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
              ##
              rootPassword: ""
              ## @param auth.createDatabase Whether to create the .Values.auth.database or not
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              createDatabase: true
              ## @param auth.database Name for a custom database to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              database: "my_database"
              ## @param auth.username Name for a custom user to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
              ##
              username: ""
              ## @param auth.password Password for the new user. Ignored if existing secret is provided
              ##
              password: ""
              ## @param auth.replicationUser MySQL replication user
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
              ##
              replicationUser: replicator
              ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
              ##
              replicationPassword: ""
              ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
              ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
              ##
              existingSecret: ""
              ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
              ##
              usePasswordFiles: false
              ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
              ## Example:
              ## customPasswordFiles:
              ##   root: /vault/secrets/mysql-root
              ##   user: /vault/secrets/mysql-user
              ##   replicator: /vault/secrets/mysql-replicator
              ##
              customPasswordFiles: {}
              ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
              ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
              ##
              defaultAuthenticationPlugin: ""
            ## @param initdbScripts Dictionary of initdb scripts

            ## Specify dictionary of scripts to be run at first boot

            ## Example:

            ## initdbScripts:

            ##   my_init_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            initdbScripts: {}

            ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts
            (Note: Overrides `initdbScripts`)

            ##

            initdbScriptsConfigMap: ""

            ## @param startdbScripts Dictionary of startdb scripts

            ## Specify dictionary of scripts to be run every time the container
            is started

            ## Example:

            ## startdbScripts:

            ##   my_start_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            startdbScripts: {}

            ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts
            (Note: Overrides `startdbScripts`)

            ##

            startdbScriptsConfigMap: ""


            ## @section MySQL Primary parameters

            ##


            primary:
              ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
              ##
              name: primary
              ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
              ##
              command: []
              ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
              ##
              args: []
              ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param primary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                log_bin_trust_function_creators=1
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAntiAffinityPreset: soft
              ## MySQL Primary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param primary.affinity Affinity for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param primary.tolerations Tolerations for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param primary.priorityClassName MySQL primary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param primary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL primary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
              ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL primary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
              ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
              ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL primary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param primary.resources.limits The resources limits for MySQL primary containers
              ## @param primary.resources.requests The requested resources for MySQL primary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.livenessProbe.enabled Enable livenessProbe
              ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.readinessProbe.enabled Enable readinessProbe
              ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.startupProbe.enabled Enable startupProbe
              ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 10
                successThreshold: 1
              ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
              ##
              customLivenessProbe: {}
              ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
              ##
              customReadinessProbe: {}
              ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
              ##
              customStartupProbe: {}
              ## @param primary.extraFlags MySQL primary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsCM: ""
              ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsSecret: ""
              ## @param primary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
                ##
                enabled: true
                ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
                ##
                annotations: {}
                ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param primary.persistence.size MySQL primary persistent volume size
                ##
                size: 8Gi
                ## @param primary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
              ##
              extraVolumes: []
              ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
              ##
              extraVolumeMounts: []
              ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
              ##
              initContainers: []
              ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
              ##
              sidecars: []
              ## MySQL Primary Service parameters
              ##
              service:
                ## @param primary.service.type MySQL Primary K8s service type
                ##
                type: ClusterIP
                ## @param primary.service.ports.mysql MySQL Primary K8s service port
                ##
                ports:
                  mysql: 3306
                ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param primary.service.annotations Additional custom annotations for MySQL primary service
                ##
                annotations: {}
                ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
                  ##
                  annotations: {}

              ## MySQL primary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
                ##
                create: false
                ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
              ##
              podLabels: {}

            ## @section MySQL Secondary parameters

            ##


            secondary:
              ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
              ##
              name: secondary
              ## @param secondary.replicaCount Number of MySQL secondary replicas
              ##
              replicaCount: 1
              ## @param secondary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
              ##
              command: []
              ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
              ##
              args: []
              ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin=mysql_native_password
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ## Allowed values: soft, hard
              ##
              podAntiAffinityPreset: soft
              ## MySQL Secondary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param secondary.affinity Affinity for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL secondary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
              ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL secondary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
              ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
              ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL secondary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param secondary.resources.limits The resources limits for MySQL secondary containers
              ## @param secondary.resources.requests The requested resources for MySQL secondary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.livenessProbe.enabled Enable livenessProbe
              ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.readinessProbe.enabled Enable readinessProbe
              ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.startupProbe.enabled Enable startupProbe
              ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 15
                successThreshold: 1
              ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
              ##
              customLivenessProbe: {}
              ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
              ##
              customReadinessProbe: {}
              ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
              ##
              customStartupProbe: {}
              ## @param secondary.extraFlags MySQL secondary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsCM: ""
              ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsSecret: ""
              ## @param secondary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
                ##
                enabled: true
                ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
                ##
                annotations: {}
                ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param secondary.persistence.size MySQL secondary persistent volume size
                ##
                size: 8Gi
                ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
              ##
              extraVolumes: []
              ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
              ##
              extraVolumeMounts: []
              ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
              ##
              initContainers: []
              ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
              ##
              sidecars: []
              ## MySQL Secondary Service parameters
              ##
              service:
                ## @param secondary.service.type MySQL secondary Kubernetes service type
                ##
                type: ClusterIP
                ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
                ##
                ports:
                  mysql: 3306
                ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
                ##
                annotations: {}
                ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
                  ##
                  annotations: {}

              ## MySQL secondary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
                ##
                create: false
                ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
              ##
              podLabels: {}

            ## @section RBAC parameters

            ##


            ## MySQL pods ServiceAccount

            ## ref:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

            ##

            serviceAccount:
              ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
              ##
              create: true
              ## @param serviceAccount.name Name of the created ServiceAccount
              ## If not set and create is true, a name is generated using the mysql.fullname template
              ##
              name: ""
              ## @param serviceAccount.annotations Annotations for MySQL Service Account
              ##
              annotations: {}
              ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
              ##
              automountServiceAccountToken: true

            ## Role Based Access

            ## ref: https://kubernetes.io/docs/admin/authorization/rbac/

            ##

            rbac:
              ## @param rbac.create Whether to create & use RBAC resources or not
              ##
              create: false
              ## @param rbac.rules Custom RBAC rules to set
              ## e.g:
              ## rules:
              ##   - apiGroups:
              ##       - ""
              ##     resources:
              ##       - pods
              ##     verbs:
              ##       - get
              ##       - list
              ##
              rules: []

            ## @section Network Policy

            ##


            ## MySQL Nework Policy configuration

            ##

            networkPolicy:
              ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
              ##
              enabled: false
              ## @param networkPolicy.allowExternal The Policy model to apply.
              ## When set to false, only pods with the correct
              ## client label will have network access to the port MySQL is listening
              ## on. When true, MySQL will accept connections from any source
              ## (with the correct destination port).
              ##
              allowExternal: true
              ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
              ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
              ## and that match other criteria, the ones that have the good label, can reach the DB.
              ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
              ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
              ##
              ## Example:
              ## explicitNamespacesSelector:
              ##   matchLabels:
              ##     role: frontend
              ##   matchExpressions:
              ##    - {key: role, operator: In, values: [frontend]}
              ##
              explicitNamespacesSelector: {}

            ## @section Volume Permissions parameters

            ##


            ## Init containers parameters:

            ## volumePermissions: Change the owner and group of the persistent
            volume mountpoint to runAsUser:fsGroup values from the
            securityContext section.

            ##

            volumePermissions:
              ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
              ##
              enabled: false
              ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
              ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
              ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
              ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
              ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/os-shell
                tag: 11-debian-11-r90
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## @param volumePermissions.resources Init container volume-permissions resources
              ##
              resources: {}

            ## @section Metrics parameters

            ##


            ## Mysqld Prometheus exporter parameters

            ##

            metrics:
              ## @param metrics.enabled Start a side-car prometheus exporter
              ##
              enabled: false
              ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
              ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
              ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
              ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param metrics.image.pullPolicy Exporter image pull policy
              ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/mysqld-exporter
                tag: 0.15.0-debian-11-r70
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## MySQL metrics container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
              ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
              ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
              ## MySQL Prometheus exporter service parameters
              ## Mysqld Prometheus exporter liveness and readiness probes
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
              ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
              ## @param metrics.service.port MySQL Prometheus Exporter service port
              ## @param metrics.service.annotations [object] Prometheus exporter service annotations
              ##
              service:
                type: ClusterIP
                port: 9104
                clusterIP: ""
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "{{ .Values.metrics.service.port }}"
              ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
              ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
              ## ref: https://github.com/prometheus/mysqld_exporter/
              ## E.g.
              ## - --collect.auto_increment.columns
              ## - --collect.binlog_size
              ## - --collect.engine_innodb_status
              ## - --collect.engine_tokudb_status
              ## - --collect.global_status
              ## - --collect.global_variables
              ## - --collect.info_schema.clientstats
              ## - --collect.info_schema.innodb_metrics
              ## - --collect.info_schema.innodb_tablespaces
              ## - --collect.info_schema.innodb_cmp
              ## - --collect.info_schema.innodb_cmpmem
              ## - --collect.info_schema.processlist
              ## - --collect.info_schema.processlist.min_time
              ## - --collect.info_schema.query_response_time
              ## - --collect.info_schema.tables
              ## - --collect.info_schema.tables.databases
              ## - --collect.info_schema.tablestats
              ## - --collect.info_schema.userstats
              ## - --collect.perf_schema.eventsstatements
              ## - --collect.perf_schema.eventsstatements.digest_text_limit
              ## - --collect.perf_schema.eventsstatements.limit
              ## - --collect.perf_schema.eventsstatements.timelimit
              ## - --collect.perf_schema.eventswaits
              ## - --collect.perf_schema.file_events
              ## - --collect.perf_schema.file_instances
              ## - --collect.perf_schema.indexiowaits
              ## - --collect.perf_schema.tableiowaits
              ## - --collect.perf_schema.tablelocks
              ## - --collect.perf_schema.replication_group_member_stats
              ## - --collect.slave_status
              ## - --collect.slave_hosts
              ## - --collect.heartbeat
              ## - --collect.heartbeat.database
              ## - --collect.heartbeat.table
              ##
              extraArgs:
                primary: []
                secondary: []
              ## Mysqld Prometheus exporter resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
              ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Mysqld Prometheus exporter liveness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.livenessProbe.enabled Enable livenessProbe
              ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 120
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Mysqld Prometheus exporter readiness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.readinessProbe.enabled Enable readinessProbe
              ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Prometheus Service Monitor
              ## ref: https://github.com/coreos/prometheus-operator
              ##
              serviceMonitor:
                ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
                ##
                enabled: false
                ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
                ##
                namespace: ""
                ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                ##
                jobLabel: ""
                ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
                ##
                interval: 30s
                ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
                ## e.g:
                ## scrapeTimeout: 30s
                ##
                scrapeTimeout: ""
                ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                relabelings: []
                ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                metricRelabelings: []
                ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
                ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                ##
                ## selector:
                ##   prometheus: my-prometheus
                ##
                selector: {}
                ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                ##
                honorLabels: false
                ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
                ##
                labels: {}
                ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
                ##
                annotations: {}

              ## Prometheus Operator prometheusRule configuration
              ##
              prometheusRule:
                ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
                ##
                enabled: false
                ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
                ##
                namespace: ""
                ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
                ##
                additionalLabels: {}
                ## @param metrics.prometheusRule.rules Prometheus Rule definitions
                ##  - alert: Mysql-Down
                ##    expr: absent(up{job="mysql"} == 1)
                ##    for: 5m
                ##    labels:
                ##      severity: warning
                ##      service: mariadb
                ##    annotations:
                ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
                ##      summary: MariaDB instance is down
                ##
                rules: []
        repoURL: https://charts.bitnami.com/bitnami
        targetRevision: 9.14.3
  operationState:
    finishedAt: '2023-11-12T06:10:01Z'
    message: successfully synced (all tasks run)
    operation:
      initiatedBy:
        username: admin
      retry: {}
      sync:
        revision: 9.14.3
        syncStrategy:
          hook: {}
    phase: Succeeded
    startedAt: '2023-11-12T06:09:58Z'
    syncResult:
      resources:
        - group: ''
          hookPhase: Running
          kind: ServiceAccount
          message: serviceaccount/pimcore-sbx-mysql unchanged
          name: pimcore-sbx-mysql
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
        - group: ''
          hookPhase: Running
          kind: Secret
          message: secret/pimcore-sbx-mysql unchanged
          name: pimcore-sbx-mysql
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
        - group: ''
          hookPhase: Running
          kind: ConfigMap
          message: configmap/pimcore-sbx-mysql configured
          name: pimcore-sbx-mysql
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
        - group: ''
          hookPhase: Running
          kind: Service
          message: service/pimcore-sbx-mysql-headless unchanged
          name: pimcore-sbx-mysql-headless
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
        - group: ''
          hookPhase: Running
          kind: Service
          message: service/pimcore-sbx-mysql configured
          name: pimcore-sbx-mysql
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
        - group: apps
          hookPhase: Running
          kind: StatefulSet
          message: statefulset.apps/pimcore-sbx-mysql configured
          name: pimcore-sbx-mysql
          namespace: pimcore-sbx
          status: Synced
          syncPhase: Sync
          version: v1
      revision: 9.14.3
      source:
        chart: mysql
        helm:
          parameters:
            - name: auth.database
              value: pimcore
            - name: auth.password
              value: pimcore
            - name: auth.rootPassword
              value: pimcore
            - name: auth.username
              value: pimcore
          values: >
            # Copyright VMware, Inc.

            # SPDX-License-Identifier: APACHE-2.0


            ## @section Global parameters

            ## Global Docker image parameters

            ## Please, note that this will override the image parameters,
            including dependencies, configured to use the global value

            ## Current available global Docker image parameters: imageRegistry,
            imagePullSecrets and storageClass

            ##


            ## @param global.imageRegistry Global Docker image registry

            ## @param global.imagePullSecrets Global Docker registry secret
            names as an array

            ## @param global.storageClass Global StorageClass for Persistent
            Volume(s)

            ##

            global:
              imageRegistry: ""
              ## E.g.
              ## imagePullSecrets:
              ##   - myRegistryKeySecretName
              ##
              imagePullSecrets: []
              storageClass: ""

            ## @section Common parameters

            ##


            ## @param kubeVersion Force target Kubernetes version (using Helm
            capabilities if not set)

            ##

            kubeVersion: ""

            ## @param nameOverride String to partially override
            common.names.fullname template (will maintain the release name)

            ##

            nameOverride: ""

            ## @param fullnameOverride String to fully override
            common.names.fullname template

            ##

            fullnameOverride: ""

            ## @param namespaceOverride String to fully override
            common.names.namespace

            ##

            namespaceOverride: ""

            ## @param clusterDomain Cluster domain

            ##

            clusterDomain: cluster.local

            ## @param commonAnnotations Common annotations to add to all MySQL
            resources (sub-charts are not considered). Evaluated as a template

            ##

            commonAnnotations: {}

            ## @param commonLabels Common labels to add to all MySQL resources
            (sub-charts are not considered). Evaluated as a template

            ##

            commonLabels: {}

            ## @param extraDeploy Array with extra yaml to deploy with the
            chart. Evaluated as a template

            ##

            extraDeploy: []


            ## @param serviceBindings.enabled Create secret for service binding
            (Experimental)

            ## Ref: https://servicebinding.io/service-provider/

            ##

            serviceBindings:
              enabled: false

            ## Enable diagnostic mode in the deployment

            ##

            diagnosticMode:
              ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
              ##
              enabled: false
              ## @param diagnosticMode.command Command to override all containers in the deployment
              ##
              command:
                - sleep
              ## @param diagnosticMode.args Args to override all containers in the deployment
              ##
              args:
                - infinity

            ## @section MySQL common parameters

            ##


            ## Bitnami MySQL image

            ## ref: https://hub.docker.com/r/bitnami/mysql/tags/

            ## @param image.registry [default: REGISTRY_NAME] MySQL image
            registry

            ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL
            image repository

            ## @skip image.tag MySQL image tag (immutable tags are recommended)

            ## @param image.digest MySQL image digest in the way sha256:aa....
            Please note this parameter, if set, will override the tag

            ## @param image.pullPolicy MySQL image pull policy

            ## @param image.pullSecrets Specify docker-registry secret names as
            an array

            ## @param image.debug Specify if debug logs should be enabled

            ##

            image:
              registry: docker.io
              repository: bitnami/mysql
              tag: 8.0.35-debian-11-r0
              digest: ""
              ## Specify a imagePullPolicy
              ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
              ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
              ##
              pullPolicy: IfNotPresent
              ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
              ## Example:
              ## pullSecrets:
              ##   - myRegistryKeySecretName
              ##
              pullSecrets: []
              ## Set to true if you would like to see extra information on logs
              ## It turns BASH and/or NAMI debugging in the image
              ##
              debug: false
            ## @param architecture MySQL architecture (`standalone` or
            `replication`)

            ##

            architecture: standalone

            ## MySQL Authentication parameters

            ##

            auth:
              ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
              ##
              rootPassword: ""
              ## @param auth.createDatabase Whether to create the .Values.auth.database or not
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              createDatabase: true
              ## @param auth.database Name for a custom database to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              database: "my_database"
              ## @param auth.username Name for a custom user to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
              ##
              username: ""
              ## @param auth.password Password for the new user. Ignored if existing secret is provided
              ##
              password: ""
              ## @param auth.replicationUser MySQL replication user
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
              ##
              replicationUser: replicator
              ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
              ##
              replicationPassword: ""
              ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
              ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
              ##
              existingSecret: ""
              ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
              ##
              usePasswordFiles: false
              ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
              ## Example:
              ## customPasswordFiles:
              ##   root: /vault/secrets/mysql-root
              ##   user: /vault/secrets/mysql-user
              ##   replicator: /vault/secrets/mysql-replicator
              ##
              customPasswordFiles: {}
              ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
              ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
              ##
              defaultAuthenticationPlugin: ""
            ## @param initdbScripts Dictionary of initdb scripts

            ## Specify dictionary of scripts to be run at first boot

            ## Example:

            ## initdbScripts:

            ##   my_init_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            initdbScripts: {}

            ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts
            (Note: Overrides `initdbScripts`)

            ##

            initdbScriptsConfigMap: ""

            ## @param startdbScripts Dictionary of startdb scripts

            ## Specify dictionary of scripts to be run every time the container
            is started

            ## Example:

            ## startdbScripts:

            ##   my_start_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            startdbScripts: {}

            ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts
            (Note: Overrides `startdbScripts`)

            ##

            startdbScriptsConfigMap: ""


            ## @section MySQL Primary parameters

            ##


            primary:
              ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
              ##
              name: primary
              ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
              ##
              command: []
              ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
              ##
              args: []
              ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param primary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                log_bin_trust_function_creators=1
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAntiAffinityPreset: soft
              ## MySQL Primary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param primary.affinity Affinity for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param primary.tolerations Tolerations for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param primary.priorityClassName MySQL primary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param primary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL primary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
              ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL primary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
              ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
              ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL primary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param primary.resources.limits The resources limits for MySQL primary containers
              ## @param primary.resources.requests The requested resources for MySQL primary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.livenessProbe.enabled Enable livenessProbe
              ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.readinessProbe.enabled Enable readinessProbe
              ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.startupProbe.enabled Enable startupProbe
              ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 10
                successThreshold: 1
              ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
              ##
              customLivenessProbe: {}
              ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
              ##
              customReadinessProbe: {}
              ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
              ##
              customStartupProbe: {}
              ## @param primary.extraFlags MySQL primary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsCM: ""
              ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsSecret: ""
              ## @param primary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
                ##
                enabled: true
                ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
                ##
                annotations: {}
                ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param primary.persistence.size MySQL primary persistent volume size
                ##
                size: 8Gi
                ## @param primary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
              ##
              extraVolumes: []
              ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
              ##
              extraVolumeMounts: []
              ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
              ##
              initContainers: []
              ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
              ##
              sidecars: []
              ## MySQL Primary Service parameters
              ##
              service:
                ## @param primary.service.type MySQL Primary K8s service type
                ##
                type: ClusterIP
                ## @param primary.service.ports.mysql MySQL Primary K8s service port
                ##
                ports:
                  mysql: 3306
                ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param primary.service.annotations Additional custom annotations for MySQL primary service
                ##
                annotations: {}
                ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
                  ##
                  annotations: {}

              ## MySQL primary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
                ##
                create: false
                ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
              ##
              podLabels: {}

            ## @section MySQL Secondary parameters

            ##


            secondary:
              ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
              ##
              name: secondary
              ## @param secondary.replicaCount Number of MySQL secondary replicas
              ##
              replicaCount: 1
              ## @param secondary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
              ##
              command: []
              ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
              ##
              args: []
              ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin=mysql_native_password
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ## Allowed values: soft, hard
              ##
              podAntiAffinityPreset: soft
              ## MySQL Secondary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param secondary.affinity Affinity for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL secondary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
              ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL secondary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
              ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
              ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL secondary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param secondary.resources.limits The resources limits for MySQL secondary containers
              ## @param secondary.resources.requests The requested resources for MySQL secondary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.livenessProbe.enabled Enable livenessProbe
              ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.readinessProbe.enabled Enable readinessProbe
              ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.startupProbe.enabled Enable startupProbe
              ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 15
                successThreshold: 1
              ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
              ##
              customLivenessProbe: {}
              ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
              ##
              customReadinessProbe: {}
              ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
              ##
              customStartupProbe: {}
              ## @param secondary.extraFlags MySQL secondary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsCM: ""
              ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsSecret: ""
              ## @param secondary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
                ##
                enabled: true
                ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
                ##
                annotations: {}
                ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param secondary.persistence.size MySQL secondary persistent volume size
                ##
                size: 8Gi
                ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
              ##
              extraVolumes: []
              ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
              ##
              extraVolumeMounts: []
              ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
              ##
              initContainers: []
              ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
              ##
              sidecars: []
              ## MySQL Secondary Service parameters
              ##
              service:
                ## @param secondary.service.type MySQL secondary Kubernetes service type
                ##
                type: ClusterIP
                ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
                ##
                ports:
                  mysql: 3306
                ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
                ##
                annotations: {}
                ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
                  ##
                  annotations: {}

              ## MySQL secondary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
                ##
                create: false
                ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
              ##
              podLabels: {}

            ## @section RBAC parameters

            ##


            ## MySQL pods ServiceAccount

            ## ref:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

            ##

            serviceAccount:
              ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
              ##
              create: true
              ## @param serviceAccount.name Name of the created ServiceAccount
              ## If not set and create is true, a name is generated using the mysql.fullname template
              ##
              name: ""
              ## @param serviceAccount.annotations Annotations for MySQL Service Account
              ##
              annotations: {}
              ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
              ##
              automountServiceAccountToken: true

            ## Role Based Access

            ## ref: https://kubernetes.io/docs/admin/authorization/rbac/

            ##

            rbac:
              ## @param rbac.create Whether to create & use RBAC resources or not
              ##
              create: false
              ## @param rbac.rules Custom RBAC rules to set
              ## e.g:
              ## rules:
              ##   - apiGroups:
              ##       - ""
              ##     resources:
              ##       - pods
              ##     verbs:
              ##       - get
              ##       - list
              ##
              rules: []

            ## @section Network Policy

            ##


            ## MySQL Nework Policy configuration

            ##

            networkPolicy:
              ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
              ##
              enabled: false
              ## @param networkPolicy.allowExternal The Policy model to apply.
              ## When set to false, only pods with the correct
              ## client label will have network access to the port MySQL is listening
              ## on. When true, MySQL will accept connections from any source
              ## (with the correct destination port).
              ##
              allowExternal: true
              ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
              ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
              ## and that match other criteria, the ones that have the good label, can reach the DB.
              ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
              ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
              ##
              ## Example:
              ## explicitNamespacesSelector:
              ##   matchLabels:
              ##     role: frontend
              ##   matchExpressions:
              ##    - {key: role, operator: In, values: [frontend]}
              ##
              explicitNamespacesSelector: {}

            ## @section Volume Permissions parameters

            ##


            ## Init containers parameters:

            ## volumePermissions: Change the owner and group of the persistent
            volume mountpoint to runAsUser:fsGroup values from the
            securityContext section.

            ##

            volumePermissions:
              ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
              ##
              enabled: false
              ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
              ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
              ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
              ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
              ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/os-shell
                tag: 11-debian-11-r90
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## @param volumePermissions.resources Init container volume-permissions resources
              ##
              resources: {}

            ## @section Metrics parameters

            ##


            ## Mysqld Prometheus exporter parameters

            ##

            metrics:
              ## @param metrics.enabled Start a side-car prometheus exporter
              ##
              enabled: false
              ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
              ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
              ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
              ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param metrics.image.pullPolicy Exporter image pull policy
              ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/mysqld-exporter
                tag: 0.15.0-debian-11-r70
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## MySQL metrics container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
              ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
              ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
              ## MySQL Prometheus exporter service parameters
              ## Mysqld Prometheus exporter liveness and readiness probes
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
              ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
              ## @param metrics.service.port MySQL Prometheus Exporter service port
              ## @param metrics.service.annotations [object] Prometheus exporter service annotations
              ##
              service:
                type: ClusterIP
                port: 9104
                clusterIP: ""
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "{{ .Values.metrics.service.port }}"
              ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
              ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
              ## ref: https://github.com/prometheus/mysqld_exporter/
              ## E.g.
              ## - --collect.auto_increment.columns
              ## - --collect.binlog_size
              ## - --collect.engine_innodb_status
              ## - --collect.engine_tokudb_status
              ## - --collect.global_status
              ## - --collect.global_variables
              ## - --collect.info_schema.clientstats
              ## - --collect.info_schema.innodb_metrics
              ## - --collect.info_schema.innodb_tablespaces
              ## - --collect.info_schema.innodb_cmp
              ## - --collect.info_schema.innodb_cmpmem
              ## - --collect.info_schema.processlist
              ## - --collect.info_schema.processlist.min_time
              ## - --collect.info_schema.query_response_time
              ## - --collect.info_schema.tables
              ## - --collect.info_schema.tables.databases
              ## - --collect.info_schema.tablestats
              ## - --collect.info_schema.userstats
              ## - --collect.perf_schema.eventsstatements
              ## - --collect.perf_schema.eventsstatements.digest_text_limit
              ## - --collect.perf_schema.eventsstatements.limit
              ## - --collect.perf_schema.eventsstatements.timelimit
              ## - --collect.perf_schema.eventswaits
              ## - --collect.perf_schema.file_events
              ## - --collect.perf_schema.file_instances
              ## - --collect.perf_schema.indexiowaits
              ## - --collect.perf_schema.tableiowaits
              ## - --collect.perf_schema.tablelocks
              ## - --collect.perf_schema.replication_group_member_stats
              ## - --collect.slave_status
              ## - --collect.slave_hosts
              ## - --collect.heartbeat
              ## - --collect.heartbeat.database
              ## - --collect.heartbeat.table
              ##
              extraArgs:
                primary: []
                secondary: []
              ## Mysqld Prometheus exporter resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
              ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Mysqld Prometheus exporter liveness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.livenessProbe.enabled Enable livenessProbe
              ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 120
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Mysqld Prometheus exporter readiness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.readinessProbe.enabled Enable readinessProbe
              ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Prometheus Service Monitor
              ## ref: https://github.com/coreos/prometheus-operator
              ##
              serviceMonitor:
                ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
                ##
                enabled: false
                ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
                ##
                namespace: ""
                ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                ##
                jobLabel: ""
                ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
                ##
                interval: 30s
                ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
                ## e.g:
                ## scrapeTimeout: 30s
                ##
                scrapeTimeout: ""
                ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                relabelings: []
                ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                metricRelabelings: []
                ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
                ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                ##
                ## selector:
                ##   prometheus: my-prometheus
                ##
                selector: {}
                ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                ##
                honorLabels: false
                ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
                ##
                labels: {}
                ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
                ##
                annotations: {}

              ## Prometheus Operator prometheusRule configuration
              ##
              prometheusRule:
                ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
                ##
                enabled: false
                ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
                ##
                namespace: ""
                ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
                ##
                additionalLabels: {}
                ## @param metrics.prometheusRule.rules Prometheus Rule definitions
                ##  - alert: Mysql-Down
                ##    expr: absent(up{job="mysql"} == 1)
                ##    for: 5m
                ##    labels:
                ##      severity: warning
                ##      service: mariadb
                ##    annotations:
                ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
                ##      summary: MariaDB instance is down
                ##
                rules: []
        repoURL: https://charts.bitnami.com/bitnami
        targetRevision: 9.14.3
  reconciledAt: '2023-11-12T07:11:13Z'
  resources:
    - kind: ConfigMap
      name: pimcore-sbx-mysql
      namespace: pimcore-sbx
      status: Synced
      version: v1
    - kind: Secret
      name: pimcore-sbx-mysql
      namespace: pimcore-sbx
      status: Synced
      version: v1
    - health:
        status: Healthy
      kind: Service
      name: pimcore-sbx-mysql
      namespace: pimcore-sbx
      status: Synced
      version: v1
    - health:
        status: Healthy
      kind: Service
      name: pimcore-sbx-mysql-headless
      namespace: pimcore-sbx
      status: Synced
      version: v1
    - kind: ServiceAccount
      name: pimcore-sbx-mysql
      namespace: pimcore-sbx
      status: Synced
      version: v1
    - group: apps
      health:
        message: >-
          statefulset rolling update complete 1 pods at revision
          pimcore-sbx-mysql-dd8958c9f...
        status: Healthy
      kind: StatefulSet
      name: pimcore-sbx-mysql
      namespace: pimcore-sbx
      status: Synced
      version: v1
  sourceType: Helm
  summary:
    images:
      - docker.io/bitnami/mysql:8.0.35-debian-11-r0
  sync:
    comparedTo:
      destination:
        namespace: pimcore-sbx
        server: https://kubernetes.default.svc
      source:
        chart: mysql
        helm:
          parameters:
            - name: auth.database
              value: pimcore
            - name: auth.password
              value: pimcore
            - name: auth.rootPassword
              value: pimcore
            - name: auth.username
              value: pimcore
          values: >
            # Copyright VMware, Inc.

            # SPDX-License-Identifier: APACHE-2.0


            ## @section Global parameters

            ## Global Docker image parameters

            ## Please, note that this will override the image parameters,
            including dependencies, configured to use the global value

            ## Current available global Docker image parameters: imageRegistry,
            imagePullSecrets and storageClass

            ##


            ## @param global.imageRegistry Global Docker image registry

            ## @param global.imagePullSecrets Global Docker registry secret
            names as an array

            ## @param global.storageClass Global StorageClass for Persistent
            Volume(s)

            ##

            global:
              imageRegistry: ""
              ## E.g.
              ## imagePullSecrets:
              ##   - myRegistryKeySecretName
              ##
              imagePullSecrets: []
              storageClass: ""

            ## @section Common parameters

            ##


            ## @param kubeVersion Force target Kubernetes version (using Helm
            capabilities if not set)

            ##

            kubeVersion: ""

            ## @param nameOverride String to partially override
            common.names.fullname template (will maintain the release name)

            ##

            nameOverride: ""

            ## @param fullnameOverride String to fully override
            common.names.fullname template

            ##

            fullnameOverride: ""

            ## @param namespaceOverride String to fully override
            common.names.namespace

            ##

            namespaceOverride: ""

            ## @param clusterDomain Cluster domain

            ##

            clusterDomain: cluster.local

            ## @param commonAnnotations Common annotations to add to all MySQL
            resources (sub-charts are not considered). Evaluated as a template

            ##

            commonAnnotations: {}

            ## @param commonLabels Common labels to add to all MySQL resources
            (sub-charts are not considered). Evaluated as a template

            ##

            commonLabels: {}

            ## @param extraDeploy Array with extra yaml to deploy with the
            chart. Evaluated as a template

            ##

            extraDeploy: []


            ## @param serviceBindings.enabled Create secret for service binding
            (Experimental)

            ## Ref: https://servicebinding.io/service-provider/

            ##

            serviceBindings:
              enabled: false

            ## Enable diagnostic mode in the deployment

            ##

            diagnosticMode:
              ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
              ##
              enabled: false
              ## @param diagnosticMode.command Command to override all containers in the deployment
              ##
              command:
                - sleep
              ## @param diagnosticMode.args Args to override all containers in the deployment
              ##
              args:
                - infinity

            ## @section MySQL common parameters

            ##


            ## Bitnami MySQL image

            ## ref: https://hub.docker.com/r/bitnami/mysql/tags/

            ## @param image.registry [default: REGISTRY_NAME] MySQL image
            registry

            ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL
            image repository

            ## @skip image.tag MySQL image tag (immutable tags are recommended)

            ## @param image.digest MySQL image digest in the way sha256:aa....
            Please note this parameter, if set, will override the tag

            ## @param image.pullPolicy MySQL image pull policy

            ## @param image.pullSecrets Specify docker-registry secret names as
            an array

            ## @param image.debug Specify if debug logs should be enabled

            ##

            image:
              registry: docker.io
              repository: bitnami/mysql
              tag: 8.0.35-debian-11-r0
              digest: ""
              ## Specify a imagePullPolicy
              ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
              ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
              ##
              pullPolicy: IfNotPresent
              ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
              ## Example:
              ## pullSecrets:
              ##   - myRegistryKeySecretName
              ##
              pullSecrets: []
              ## Set to true if you would like to see extra information on logs
              ## It turns BASH and/or NAMI debugging in the image
              ##
              debug: false
            ## @param architecture MySQL architecture (`standalone` or
            `replication`)

            ##

            architecture: standalone

            ## MySQL Authentication parameters

            ##

            auth:
              ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
              ##
              rootPassword: ""
              ## @param auth.createDatabase Whether to create the .Values.auth.database or not
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              createDatabase: true
              ## @param auth.database Name for a custom database to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
              ##
              database: "my_database"
              ## @param auth.username Name for a custom user to create
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
              ##
              username: ""
              ## @param auth.password Password for the new user. Ignored if existing secret is provided
              ##
              password: ""
              ## @param auth.replicationUser MySQL replication user
              ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
              ##
              replicationUser: replicator
              ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
              ##
              replicationPassword: ""
              ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
              ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
              ##
              existingSecret: ""
              ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
              ##
              usePasswordFiles: false
              ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
              ## Example:
              ## customPasswordFiles:
              ##   root: /vault/secrets/mysql-root
              ##   user: /vault/secrets/mysql-user
              ##   replicator: /vault/secrets/mysql-replicator
              ##
              customPasswordFiles: {}
              ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
              ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
              ##
              defaultAuthenticationPlugin: ""
            ## @param initdbScripts Dictionary of initdb scripts

            ## Specify dictionary of scripts to be run at first boot

            ## Example:

            ## initdbScripts:

            ##   my_init_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            initdbScripts: {}

            ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts
            (Note: Overrides `initdbScripts`)

            ##

            initdbScriptsConfigMap: ""

            ## @param startdbScripts Dictionary of startdb scripts

            ## Specify dictionary of scripts to be run every time the container
            is started

            ## Example:

            ## startdbScripts:

            ##   my_start_script.sh: |

            ##      #!/bin/bash

            ##      echo "Do something."

            ##

            startdbScripts: {}

            ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts
            (Note: Overrides `startdbScripts`)

            ##

            startdbScriptsConfigMap: ""


            ## @section MySQL Primary parameters

            ##


            primary:
              ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
              ##
              name: primary
              ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
              ##
              command: []
              ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
              ##
              args: []
              ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param primary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                log_bin_trust_function_creators=1
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAntiAffinityPreset: soft
              ## MySQL Primary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param primary.affinity Affinity for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param primary.tolerations Tolerations for MySQL primary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param primary.priorityClassName MySQL primary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param primary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL primary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
              ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL primary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
              ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
              ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL primary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param primary.resources.limits The resources limits for MySQL primary containers
              ## @param primary.resources.requests The requested resources for MySQL primary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.livenessProbe.enabled Enable livenessProbe
              ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.readinessProbe.enabled Enable readinessProbe
              ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param primary.startupProbe.enabled Enable startupProbe
              ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 10
                successThreshold: 1
              ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
              ##
              customLivenessProbe: {}
              ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
              ##
              customReadinessProbe: {}
              ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
              ##
              customStartupProbe: {}
              ## @param primary.extraFlags MySQL primary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsCM: ""
              ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
              ##
              extraEnvVarsSecret: ""
              ## @param primary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
                ##
                enabled: true
                ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
                ##
                annotations: {}
                ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param primary.persistence.size MySQL primary persistent volume size
                ##
                size: 8Gi
                ## @param primary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
              ##
              extraVolumes: []
              ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
              ##
              extraVolumeMounts: []
              ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
              ##
              initContainers: []
              ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
              ##
              sidecars: []
              ## MySQL Primary Service parameters
              ##
              service:
                ## @param primary.service.type MySQL Primary K8s service type
                ##
                type: ClusterIP
                ## @param primary.service.ports.mysql MySQL Primary K8s service port
                ##
                ports:
                  mysql: 3306
                ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param primary.service.annotations Additional custom annotations for MySQL primary service
                ##
                annotations: {}
                ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
                  ##
                  annotations: {}

              ## MySQL primary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
                ##
                create: false
                ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
              ##
              podLabels: {}

            ## @section MySQL Secondary parameters

            ##


            secondary:
              ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
              ##
              name: secondary
              ## @param secondary.replicaCount Number of MySQL secondary replicas
              ##
              replicaCount: 1
              ## @param secondary.hostAliases Deployment pod host aliases
              ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
              ##
              hostAliases: []
              ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
              ##
              command: []
              ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
              ##
              args: []
              ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
              ##
              lifecycleHooks: {}
              ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
              ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
              ##
              configuration: |-
                [mysqld]
                default_authentication_plugin=mysql_native_password
                skip-name-resolve
                explicit_defaults_for_timestamp
                basedir=/opt/bitnami/mysql
                plugin_dir=/opt/bitnami/mysql/lib/plugin
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                datadir=/bitnami/mysql/data
                tmpdir=/opt/bitnami/mysql/tmp
                max_allowed_packet=16M
                bind-address=*
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
                log-error=/opt/bitnami/mysql/logs/mysqld.log
                character-set-server=UTF8MB4
                slow_query_log=0
                long_query_time=10.0

                [client]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                default-character-set=UTF8MB4
                plugin_dir=/opt/bitnami/mysql/lib/plugin

                [manager]
                port=3306
                socket=/opt/bitnami/mysql/tmp/mysql.sock
                pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
              ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
              ## NOTE: When it's set the 'configuration' parameter is ignored
              ##
              existingConfigmap: ""
              ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
              ##
              updateStrategy:
                type: RollingUpdate
              ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
              ##
              podAnnotations: {}
              ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ##
              podAffinityPreset: ""
              ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
              ## Allowed values: soft, hard
              ##
              podAntiAffinityPreset: soft
              ## MySQL Secondary node affinity preset
              ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
              ##
              nodeAffinityPreset:
                ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
                ##
                type: ""
                ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
                ## E.g.
                ## key: "kubernetes.io/e2e-az-name"
                ##
                key: ""
                ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
                ## E.g.
                ## values:
                ##   - e2e-az1
                ##   - e2e-az2
                ##
                values: []
              ## @param secondary.affinity Affinity for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
              ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
              ##
              affinity: {}
              ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/user-guide/node-selection/
              ##
              nodeSelector: {}
              ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
              ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
              ##
              tolerations: []
              ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
              ##
              priorityClassName: ""
              ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
              ##
              runtimeClassName: ""
              ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
              ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
              ##
              schedulerName: ""
              ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
              ##
              terminationGracePeriodSeconds: ""
              ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
              ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## The value is evaluated as a template
              ##
              topologySpreadConstraints: []
              ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
              ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
              ##
              podManagementPolicy: ""
              ## MySQL secondary Pod security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
              ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
              ##
              podSecurityContext:
                enabled: true
                fsGroup: 1001
              ## MySQL secondary container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
              ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
              ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
              ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
              ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                seccompProfile:
                  type: "RuntimeDefault"
              ## MySQL secondary container's resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param secondary.resources.limits The resources limits for MySQL secondary containers
              ## @param secondary.resources.requests The requested resources for MySQL secondary containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 250m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Configure extra options for liveness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.livenessProbe.enabled Enable livenessProbe
              ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for readiness probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.readinessProbe.enabled Enable readinessProbe
              ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
                successThreshold: 1
              ## Configure extra options for startupProbe probe
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
              ## @param secondary.startupProbe.enabled Enable startupProbe
              ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
              ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
              ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
              ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
              ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
              ##
              startupProbe:
                enabled: true
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 15
                successThreshold: 1
              ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
              ##
              customLivenessProbe: {}
              ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
              ##
              customReadinessProbe: {}
              ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
              ##
              customStartupProbe: {}
              ## @param secondary.extraFlags MySQL secondary additional command line flags
              ## Can be used to specify command line flags, for example:
              ## E.g.
              ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
              ##
              extraFlags: ""
              ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
              ## E.g.
              ## extraEnvVars:
              ##  - name: TZ
              ##    value: "Europe/Paris"
              ##
              extraEnvVars: []
              ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsCM: ""
              ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
              ##
              extraEnvVarsSecret: ""
              ## @param secondary.extraPorts Extra ports to expose
              ##
              extraPorts: []
              ## Enable persistence using Persistent Volume Claims
              ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
              ##
              persistence:
                ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
                ##
                enabled: true
                ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
                ## NOTE: When it's set the rest of persistence parameters are ignored
                ##
                existingClaim: ""
                ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
                ##
                subPath: ""
                ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
                ## If defined, storageClassName: <storageClass>
                ## If set to "-", storageClassName: "", which disables dynamic provisioning
                ## If undefined (the default) or set to null, no storageClassName spec is
                ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                ##   GKE, AWS & OpenStack)
                ##
                storageClass: ""
                ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
                ##
                annotations: {}
                ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
                ##
                accessModes:
                  - ReadWriteOnce
                ## @param secondary.persistence.size MySQL secondary persistent volume size
                ##
                size: 8Gi
                ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
                ## selector:
                ##   matchLabels:
                ##     app: my-app
                ##
                selector: {}
              ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
              ##
              extraVolumes: []
              ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
              ##
              extraVolumeMounts: []
              ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
              ##
              initContainers: []
              ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
              ##
              sidecars: []
              ## MySQL Secondary Service parameters
              ##
              service:
                ## @param secondary.service.type MySQL secondary Kubernetes service type
                ##
                type: ClusterIP
                ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
                ##
                ports:
                  mysql: 3306
                ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                ##
                nodePorts:
                  mysql: ""
                ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
                ## e.g:
                ## clusterIP: None
                ##
                clusterIP: ""
                ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
                ## Set the LoadBalancer service type to internal only
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                ##
                loadBalancerIP: ""
                ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
                ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                ##
                externalTrafficPolicy: Cluster
                ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
                ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                ## E.g.
                ## loadBalancerSourceRanges:
                ##   - 10.10.10.0/24
                ##
                loadBalancerSourceRanges: []
                ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
                ##
                extraPorts: []
                ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
                ##
                annotations: {}
                ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                ## If "ClientIP", consecutive client requests will be directed to the same Pod
                ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                ##
                sessionAffinity: None
                ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                ## sessionAffinityConfig:
                ##   clientIP:
                ##     timeoutSeconds: 300
                ##
                sessionAffinityConfig: {}
                ## Headless service properties
                ##
                headless:
                  ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
                  ##
                  annotations: {}

              ## MySQL secondary Pod Disruption Budget configuration
              ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              ##
              pdb:
                ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
                ##
                create: false
                ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
                ##
                minAvailable: 1
                ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
                ##
                maxUnavailable: ""
              ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
              ##
              podLabels: {}

            ## @section RBAC parameters

            ##


            ## MySQL pods ServiceAccount

            ## ref:
            https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

            ##

            serviceAccount:
              ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
              ##
              create: true
              ## @param serviceAccount.name Name of the created ServiceAccount
              ## If not set and create is true, a name is generated using the mysql.fullname template
              ##
              name: ""
              ## @param serviceAccount.annotations Annotations for MySQL Service Account
              ##
              annotations: {}
              ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
              ##
              automountServiceAccountToken: true

            ## Role Based Access

            ## ref: https://kubernetes.io/docs/admin/authorization/rbac/

            ##

            rbac:
              ## @param rbac.create Whether to create & use RBAC resources or not
              ##
              create: false
              ## @param rbac.rules Custom RBAC rules to set
              ## e.g:
              ## rules:
              ##   - apiGroups:
              ##       - ""
              ##     resources:
              ##       - pods
              ##     verbs:
              ##       - get
              ##       - list
              ##
              rules: []

            ## @section Network Policy

            ##


            ## MySQL Nework Policy configuration

            ##

            networkPolicy:
              ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
              ##
              enabled: false
              ## @param networkPolicy.allowExternal The Policy model to apply.
              ## When set to false, only pods with the correct
              ## client label will have network access to the port MySQL is listening
              ## on. When true, MySQL will accept connections from any source
              ## (with the correct destination port).
              ##
              allowExternal: true
              ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
              ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
              ## and that match other criteria, the ones that have the good label, can reach the DB.
              ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
              ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
              ##
              ## Example:
              ## explicitNamespacesSelector:
              ##   matchLabels:
              ##     role: frontend
              ##   matchExpressions:
              ##    - {key: role, operator: In, values: [frontend]}
              ##
              explicitNamespacesSelector: {}

            ## @section Volume Permissions parameters

            ##


            ## Init containers parameters:

            ## volumePermissions: Change the owner and group of the persistent
            volume mountpoint to runAsUser:fsGroup values from the
            securityContext section.

            ##

            volumePermissions:
              ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
              ##
              enabled: false
              ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
              ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
              ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
              ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
              ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/os-shell
                tag: 11-debian-11-r90
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## @param volumePermissions.resources Init container volume-permissions resources
              ##
              resources: {}

            ## @section Metrics parameters

            ##


            ## Mysqld Prometheus exporter parameters

            ##

            metrics:
              ## @param metrics.enabled Start a side-car prometheus exporter
              ##
              enabled: false
              ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
              ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
              ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
              ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
              ## @param metrics.image.pullPolicy Exporter image pull policy
              ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
              ##
              image:
                registry: docker.io
                repository: bitnami/mysqld-exporter
                tag: 0.15.0-debian-11-r70
                digest: ""
                pullPolicy: IfNotPresent
                ## Optionally specify an array of imagePullSecrets.
                ## Secrets must be manually created in the namespace.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                ## e.g:
                ## pullSecrets:
                ##   - myRegistryKeySecretName
                ##
                pullSecrets: []
              ## MySQL metrics container security context
              ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
              ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
              ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
              ##
              containerSecurityContext:
                enabled: true
                runAsUser: 1001
                runAsNonRoot: true
              ## MySQL Prometheus exporter service parameters
              ## Mysqld Prometheus exporter liveness and readiness probes
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
              ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
              ## @param metrics.service.port MySQL Prometheus Exporter service port
              ## @param metrics.service.annotations [object] Prometheus exporter service annotations
              ##
              service:
                type: ClusterIP
                port: 9104
                clusterIP: ""
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "{{ .Values.metrics.service.port }}"
              ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
              ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
              ## ref: https://github.com/prometheus/mysqld_exporter/
              ## E.g.
              ## - --collect.auto_increment.columns
              ## - --collect.binlog_size
              ## - --collect.engine_innodb_status
              ## - --collect.engine_tokudb_status
              ## - --collect.global_status
              ## - --collect.global_variables
              ## - --collect.info_schema.clientstats
              ## - --collect.info_schema.innodb_metrics
              ## - --collect.info_schema.innodb_tablespaces
              ## - --collect.info_schema.innodb_cmp
              ## - --collect.info_schema.innodb_cmpmem
              ## - --collect.info_schema.processlist
              ## - --collect.info_schema.processlist.min_time
              ## - --collect.info_schema.query_response_time
              ## - --collect.info_schema.tables
              ## - --collect.info_schema.tables.databases
              ## - --collect.info_schema.tablestats
              ## - --collect.info_schema.userstats
              ## - --collect.perf_schema.eventsstatements
              ## - --collect.perf_schema.eventsstatements.digest_text_limit
              ## - --collect.perf_schema.eventsstatements.limit
              ## - --collect.perf_schema.eventsstatements.timelimit
              ## - --collect.perf_schema.eventswaits
              ## - --collect.perf_schema.file_events
              ## - --collect.perf_schema.file_instances
              ## - --collect.perf_schema.indexiowaits
              ## - --collect.perf_schema.tableiowaits
              ## - --collect.perf_schema.tablelocks
              ## - --collect.perf_schema.replication_group_member_stats
              ## - --collect.slave_status
              ## - --collect.slave_hosts
              ## - --collect.heartbeat
              ## - --collect.heartbeat.database
              ## - --collect.heartbeat.table
              ##
              extraArgs:
                primary: []
                secondary: []
              ## Mysqld Prometheus exporter resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              ## We usually recommend not to specify default resources and to leave this as a conscious
              ## choice for the user. This also increases chances charts run on environments with little
              ## resources, such as Minikube. If you do want to specify resources, uncomment the following
              ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
              ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
              ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
              ##
              resources:
                ## Example:
                ## limits:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                limits: {}
                ## Examples:
                ## requests:
                ##    cpu: 100m
                ##    memory: 256Mi
                ##
                requests: {}
              ## Mysqld Prometheus exporter liveness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.livenessProbe.enabled Enable livenessProbe
              ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
              ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
              ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
              ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
              ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
              ##
              livenessProbe:
                enabled: true
                initialDelaySeconds: 120
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Mysqld Prometheus exporter readiness probe
              ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
              ## @param metrics.readinessProbe.enabled Enable readinessProbe
              ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
              ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
              ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
              ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
              ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
              ##
              readinessProbe:
                enabled: true
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ## Prometheus Service Monitor
              ## ref: https://github.com/coreos/prometheus-operator
              ##
              serviceMonitor:
                ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
                ##
                enabled: false
                ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
                ##
                namespace: ""
                ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                ##
                jobLabel: ""
                ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
                ##
                interval: 30s
                ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
                ## e.g:
                ## scrapeTimeout: 30s
                ##
                scrapeTimeout: ""
                ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                relabelings: []
                ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
                ##
                metricRelabelings: []
                ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
                ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                ##
                ## selector:
                ##   prometheus: my-prometheus
                ##
                selector: {}
                ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                ##
                honorLabels: false
                ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
                ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
                ##
                labels: {}
                ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
                ##
                annotations: {}

              ## Prometheus Operator prometheusRule configuration
              ##
              prometheusRule:
                ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
                ##
                enabled: false
                ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
                ##
                namespace: ""
                ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
                ##
                additionalLabels: {}
                ## @param metrics.prometheusRule.rules Prometheus Rule definitions
                ##  - alert: Mysql-Down
                ##    expr: absent(up{job="mysql"} == 1)
                ##    for: 5m
                ##    labels:
                ##      severity: warning
                ##      service: mariadb
                ##    annotations:
                ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
                ##      summary: MariaDB instance is down
                ##
                rules: []
        repoURL: https://charts.bitnami.com/bitnami
        targetRevision: 9.14.3
    revision: 9.14.3
    status: Synced
spec:
  destination:
    namespace: pimcore-sbx
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: mysql
    helm:
      parameters:
        - name: auth.database
          value: pimcore
        - name: auth.password
          value: pimcore
        - name: auth.rootPassword
          value: pimcore
        - name: auth.username
          value: pimcore
      values: >
        # Copyright VMware, Inc.

        # SPDX-License-Identifier: APACHE-2.0


        ## @section Global parameters

        ## Global Docker image parameters

        ## Please, note that this will override the image parameters, including
        dependencies, configured to use the global value

        ## Current available global Docker image parameters: imageRegistry,
        imagePullSecrets and storageClass

        ##


        ## @param global.imageRegistry Global Docker image registry

        ## @param global.imagePullSecrets Global Docker registry secret names as
        an array

        ## @param global.storageClass Global StorageClass for Persistent
        Volume(s)

        ##

        global:
          imageRegistry: ""
          ## E.g.
          ## imagePullSecrets:
          ##   - myRegistryKeySecretName
          ##
          imagePullSecrets: []
          storageClass: ""

        ## @section Common parameters

        ##


        ## @param kubeVersion Force target Kubernetes version (using Helm
        capabilities if not set)

        ##

        kubeVersion: ""

        ## @param nameOverride String to partially override
        common.names.fullname template (will maintain the release name)

        ##

        nameOverride: ""

        ## @param fullnameOverride String to fully override
        common.names.fullname template

        ##

        fullnameOverride: ""

        ## @param namespaceOverride String to fully override
        common.names.namespace

        ##

        namespaceOverride: ""

        ## @param clusterDomain Cluster domain

        ##

        clusterDomain: cluster.local

        ## @param commonAnnotations Common annotations to add to all MySQL
        resources (sub-charts are not considered). Evaluated as a template

        ##

        commonAnnotations: {}

        ## @param commonLabels Common labels to add to all MySQL resources
        (sub-charts are not considered). Evaluated as a template

        ##

        commonLabels: {}

        ## @param extraDeploy Array with extra yaml to deploy with the chart.
        Evaluated as a template

        ##

        extraDeploy: []


        ## @param serviceBindings.enabled Create secret for service binding
        (Experimental)

        ## Ref: https://servicebinding.io/service-provider/

        ##

        serviceBindings:
          enabled: false

        ## Enable diagnostic mode in the deployment

        ##

        diagnosticMode:
          ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
          ##
          enabled: false
          ## @param diagnosticMode.command Command to override all containers in the deployment
          ##
          command:
            - sleep
          ## @param diagnosticMode.args Args to override all containers in the deployment
          ##
          args:
            - infinity

        ## @section MySQL common parameters

        ##


        ## Bitnami MySQL image

        ## ref: https://hub.docker.com/r/bitnami/mysql/tags/

        ## @param image.registry [default: REGISTRY_NAME] MySQL image registry

        ## @param image.repository [default: REPOSITORY_NAME/mysql] MySQL image
        repository

        ## @skip image.tag MySQL image tag (immutable tags are recommended)

        ## @param image.digest MySQL image digest in the way sha256:aa....
        Please note this parameter, if set, will override the tag

        ## @param image.pullPolicy MySQL image pull policy

        ## @param image.pullSecrets Specify docker-registry secret names as an
        array

        ## @param image.debug Specify if debug logs should be enabled

        ##

        image:
          registry: docker.io
          repository: bitnami/mysql
          tag: 8.0.35-debian-11-r0
          digest: ""
          ## Specify a imagePullPolicy
          ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
          ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
          ##
          pullPolicy: IfNotPresent
          ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
          ## Example:
          ## pullSecrets:
          ##   - myRegistryKeySecretName
          ##
          pullSecrets: []
          ## Set to true if you would like to see extra information on logs
          ## It turns BASH and/or NAMI debugging in the image
          ##
          debug: false
        ## @param architecture MySQL architecture (`standalone` or
        `replication`)

        ##

        architecture: standalone

        ## MySQL Authentication parameters

        ##

        auth:
          ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
          ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
          ##
          rootPassword: ""
          ## @param auth.createDatabase Whether to create the .Values.auth.database or not
          ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
          ##
          createDatabase: true
          ## @param auth.database Name for a custom database to create
          ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
          ##
          database: "my_database"
          ## @param auth.username Name for a custom user to create
          ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
          ##
          username: ""
          ## @param auth.password Password for the new user. Ignored if existing secret is provided
          ##
          password: ""
          ## @param auth.replicationUser MySQL replication user
          ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
          ##
          replicationUser: replicator
          ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
          ##
          replicationPassword: ""
          ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
          ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
          ##
          existingSecret: ""
          ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
          ##
          usePasswordFiles: false
          ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
          ## Example:
          ## customPasswordFiles:
          ##   root: /vault/secrets/mysql-root
          ##   user: /vault/secrets/mysql-user
          ##   replicator: /vault/secrets/mysql-replicator
          ##
          customPasswordFiles: {}
          ## @param auth.defaultAuthenticationPlugin Sets the default authentication plugin, by default it will use `mysql_native_password`
          ## NOTE: `mysql_native_password` will be deprecated in future mysql version and it is used here for compatibility with previous version. If you want to use the new default authentication method set it to `caching_sha2_password`.
          ##
          defaultAuthenticationPlugin: ""
        ## @param initdbScripts Dictionary of initdb scripts

        ## Specify dictionary of scripts to be run at first boot

        ## Example:

        ## initdbScripts:

        ##   my_init_script.sh: |

        ##      #!/bin/bash

        ##      echo "Do something."

        ##

        initdbScripts: {}

        ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts
        (Note: Overrides `initdbScripts`)

        ##

        initdbScriptsConfigMap: ""

        ## @param startdbScripts Dictionary of startdb scripts

        ## Specify dictionary of scripts to be run every time the container is
        started

        ## Example:

        ## startdbScripts:

        ##   my_start_script.sh: |

        ##      #!/bin/bash

        ##      echo "Do something."

        ##

        startdbScripts: {}

        ## @param startdbScriptsConfigMap ConfigMap with the startdb scripts
        (Note: Overrides `startdbScripts`)

        ##

        startdbScriptsConfigMap: ""


        ## @section MySQL Primary parameters

        ##


        primary:
          ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
          ##
          name: primary
          ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
          ##
          command: []
          ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
          ##
          args: []
          ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
          ##
          lifecycleHooks: {}
          ## @param primary.hostAliases Deployment pod host aliases
          ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
          ##
          hostAliases: []
          ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
          ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
          ##
          configuration: |-
            [mysqld]
            default_authentication_plugin={{- .Values.auth.defaultAuthenticationPlugin | default "mysql_native_password" }}
            skip-name-resolve
            explicit_defaults_for_timestamp
            basedir=/opt/bitnami/mysql
            plugin_dir=/opt/bitnami/mysql/lib/plugin
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            datadir=/bitnami/mysql/data
            tmpdir=/opt/bitnami/mysql/tmp
            max_allowed_packet=16M
            log_bin_trust_function_creators=1
            bind-address=*
            pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
            log-error=/opt/bitnami/mysql/logs/mysqld.log
            character-set-server=UTF8MB4
            slow_query_log=0
            long_query_time=10.0

            [client]
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            default-character-set=UTF8MB4
            plugin_dir=/opt/bitnami/mysql/lib/plugin

            [manager]
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
          ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
          ## NOTE: When it's set the 'configuration' parameter is ignored
          ##
          existingConfigmap: ""
          ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
          ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
          ##
          updateStrategy:
            type: RollingUpdate
          ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
          ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
          ##
          podAnnotations: {}
          ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
          ##
          podAffinityPreset: ""
          ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
          ##
          podAntiAffinityPreset: soft
          ## MySQL Primary node affinity preset
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
          ##
          nodeAffinityPreset:
            ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
            ##
            type: ""
            ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
            ## E.g.
            ## key: "kubernetes.io/e2e-az-name"
            ##
            key: ""
            ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
            ## E.g.
            ## values:
            ##   - e2e-az1
            ##   - e2e-az2
            ##
            values: []
          ## @param primary.affinity Affinity for MySQL primary pods assignment
          ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
          ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
          ##
          affinity: {}
          ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
          ## ref: https://kubernetes.io/docs/user-guide/node-selection/
          ##
          nodeSelector: {}
          ## @param primary.tolerations Tolerations for MySQL primary pods assignment
          ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
          ##
          tolerations: []
          ## @param primary.priorityClassName MySQL primary pods' priorityClassName
          ##
          priorityClassName: ""
          ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
          ##
          runtimeClassName: ""
          ## @param primary.schedulerName Name of the k8s scheduler (other than default)
          ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
          ##
          schedulerName: ""
          ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
          ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
          ##
          terminationGracePeriodSeconds: ""
          ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
          ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
          ## The value is evaluated as a template
          ##
          topologySpreadConstraints: []
          ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
          ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
          ##
          podManagementPolicy: ""
          ## MySQL primary Pod security context
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
          ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
          ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
          ##
          podSecurityContext:
            enabled: true
            fsGroup: 1001
          ## MySQL primary container security context
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
          ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
          ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
          ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
          ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
          ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
          ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
          ##
          containerSecurityContext:
            enabled: true
            runAsUser: 1001
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: "RuntimeDefault"
          ## MySQL primary container's resource requests and limits
          ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
          ## We usually recommend not to specify default resources and to leave this as a conscious
          ## choice for the user. This also increases chances charts run on environments with little
          ## resources, such as Minikube. If you do want to specify resources, uncomment the following
          ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          ## @param primary.resources.limits The resources limits for MySQL primary containers
          ## @param primary.resources.requests The requested resources for MySQL primary containers
          ##
          resources:
            ## Example:
            ## limits:
            ##    cpu: 250m
            ##    memory: 256Mi
            ##
            limits: {}
            ## Examples:
            ## requests:
            ##    cpu: 250m
            ##    memory: 256Mi
            ##
            requests: {}
          ## Configure extra options for liveness probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param primary.livenessProbe.enabled Enable livenessProbe
          ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
          ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
          ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
          ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
          ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
          ##
          livenessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          ## Configure extra options for readiness probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param primary.readinessProbe.enabled Enable readinessProbe
          ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
          ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
          ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
          ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
          ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
          ##
          readinessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          ## Configure extra options for startupProbe probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param primary.startupProbe.enabled Enable startupProbe
          ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
          ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
          ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
          ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
          ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
          ##
          startupProbe:
            enabled: true
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 10
            successThreshold: 1
          ## @param primary.customLivenessProbe Override default liveness probe for MySQL primary containers
          ##
          customLivenessProbe: {}
          ## @param primary.customReadinessProbe Override default readiness probe for MySQL primary containers
          ##
          customReadinessProbe: {}
          ## @param primary.customStartupProbe Override default startup probe for MySQL primary containers
          ##
          customStartupProbe: {}
          ## @param primary.extraFlags MySQL primary additional command line flags
          ## Can be used to specify command line flags, for example:
          ## E.g.
          ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
          ##
          extraFlags: ""
          ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
          ## E.g.
          ## extraEnvVars:
          ##  - name: TZ
          ##    value: "Europe/Paris"
          ##
          extraEnvVars: []
          ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL primary containers
          ##
          extraEnvVarsCM: ""
          ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL primary containers
          ##
          extraEnvVarsSecret: ""
          ## @param primary.extraPorts Extra ports to expose
          ##
          extraPorts: []
          ## Enable persistence using Persistent Volume Claims
          ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
          ##
          persistence:
            ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
            ##
            enabled: true
            ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL primary replicas
            ## NOTE: When it's set the rest of persistence parameters are ignored
            ##
            existingClaim: ""
            ## @param primary.persistence.subPath The name of a volume's sub path to mount for persistence
            ##
            subPath: ""
            ## @param primary.persistence.storageClass MySQL primary persistent volume storage Class
            ## If defined, storageClassName: <storageClass>
            ## If set to "-", storageClassName: "", which disables dynamic provisioning
            ## If undefined (the default) or set to null, no storageClassName spec is
            ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
            ##   GKE, AWS & OpenStack)
            ##
            storageClass: ""
            ## @param primary.persistence.annotations MySQL primary persistent volume claim annotations
            ##
            annotations: {}
            ## @param primary.persistence.accessModes MySQL primary persistent volume access Modes
            ##
            accessModes:
              - ReadWriteOnce
            ## @param primary.persistence.size MySQL primary persistent volume size
            ##
            size: 8Gi
            ## @param primary.persistence.selector Selector to match an existing Persistent Volume
            ## selector:
            ##   matchLabels:
            ##     app: my-app
            ##
            selector: {}
          ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MySQL Primary pod(s)
          ##
          extraVolumes: []
          ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL Primary container(s)
          ##
          extraVolumeMounts: []
          ## @param primary.initContainers Add additional init containers for the MySQL Primary pod(s)
          ##
          initContainers: []
          ## @param primary.sidecars Add additional sidecar containers for the MySQL Primary pod(s)
          ##
          sidecars: []
          ## MySQL Primary Service parameters
          ##
          service:
            ## @param primary.service.type MySQL Primary K8s service type
            ##
            type: ClusterIP
            ## @param primary.service.ports.mysql MySQL Primary K8s service port
            ##
            ports:
              mysql: 3306
            ## @param primary.service.nodePorts.mysql MySQL Primary K8s service node port
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
            ##
            nodePorts:
              mysql: ""
            ## @param primary.service.clusterIP MySQL Primary K8s service clusterIP IP
            ## e.g:
            ## clusterIP: None
            ##
            clusterIP: ""
            ## @param primary.service.loadBalancerIP MySQL Primary loadBalancerIP if service type is `LoadBalancer`
            ## Set the LoadBalancer service type to internal only
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
            ##
            loadBalancerIP: ""
            ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
            ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
            ##
            externalTrafficPolicy: Cluster
            ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL Primary service is LoadBalancer
            ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
            ## E.g.
            ## loadBalancerSourceRanges:
            ##   - 10.10.10.0/24
            ##
            loadBalancerSourceRanges: []
            ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
            ##
            extraPorts: []
            ## @param primary.service.annotations Additional custom annotations for MySQL primary service
            ##
            annotations: {}
            ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
            ## If "ClientIP", consecutive client requests will be directed to the same Pod
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            ##
            sessionAffinity: None
            ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
            ## sessionAffinityConfig:
            ##   clientIP:
            ##     timeoutSeconds: 300
            ##
            sessionAffinityConfig: {}
            ## Headless service properties
            ##
            headless:
              ## @param primary.service.headless.annotations Additional custom annotations for headless MySQL primary service.
              ##
              annotations: {}

          ## MySQL primary Pod Disruption Budget configuration
          ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
          ##
          pdb:
            ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL primary pods
            ##
            create: false
            ## @param primary.pdb.minAvailable Minimum number/percentage of MySQL primary pods that should remain scheduled
            ##
            minAvailable: 1
            ## @param primary.pdb.maxUnavailable Maximum number/percentage of MySQL primary pods that may be made unavailable
            ##
            maxUnavailable: ""
          ## @param primary.podLabels MySQL Primary pod label. If labels are same as commonLabels , this will take precedence
          ##
          podLabels: {}

        ## @section MySQL Secondary parameters

        ##


        secondary:
          ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
          ##
          name: secondary
          ## @param secondary.replicaCount Number of MySQL secondary replicas
          ##
          replicaCount: 1
          ## @param secondary.hostAliases Deployment pod host aliases
          ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
          ##
          hostAliases: []
          ## @param secondary.command Override default container command on MySQL Secondary container(s) (useful when using custom images)
          ##
          command: []
          ## @param secondary.args Override default container args on MySQL Secondary container(s) (useful when using custom images)
          ##
          args: []
          ## @param secondary.lifecycleHooks for the MySQL Secondary container(s) to automate configuration before or after startup
          ##
          lifecycleHooks: {}
          ## @param secondary.configuration [string] Configure MySQL Secondary with a custom my.cnf file
          ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
          ##
          configuration: |-
            [mysqld]
            default_authentication_plugin=mysql_native_password
            skip-name-resolve
            explicit_defaults_for_timestamp
            basedir=/opt/bitnami/mysql
            plugin_dir=/opt/bitnami/mysql/lib/plugin
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            datadir=/bitnami/mysql/data
            tmpdir=/opt/bitnami/mysql/tmp
            max_allowed_packet=16M
            bind-address=*
            pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
            log-error=/opt/bitnami/mysql/logs/mysqld.log
            character-set-server=UTF8MB4
            slow_query_log=0
            long_query_time=10.0

            [client]
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            default-character-set=UTF8MB4
            plugin_dir=/opt/bitnami/mysql/lib/plugin

            [manager]
            port=3306
            socket=/opt/bitnami/mysql/tmp/mysql.sock
            pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
          ## @param secondary.existingConfigmap Name of existing ConfigMap with MySQL Secondary configuration.
          ## NOTE: When it's set the 'configuration' parameter is ignored
          ##
          existingConfigmap: ""
          ## @param secondary.updateStrategy.type Update strategy type for the MySQL secondary statefulset
          ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
          ##
          updateStrategy:
            type: RollingUpdate
          ## @param secondary.podAnnotations Additional pod annotations for MySQL secondary pods
          ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
          ##
          podAnnotations: {}
          ## @param secondary.podAffinityPreset MySQL secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
          ##
          podAffinityPreset: ""
          ## @param secondary.podAntiAffinityPreset MySQL secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
          ## Allowed values: soft, hard
          ##
          podAntiAffinityPreset: soft
          ## MySQL Secondary node affinity preset
          ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
          ##
          nodeAffinityPreset:
            ## @param secondary.nodeAffinityPreset.type MySQL secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
            ##
            type: ""
            ## @param secondary.nodeAffinityPreset.key MySQL secondary node label key to match Ignored if `secondary.affinity` is set.
            ## E.g.
            ## key: "kubernetes.io/e2e-az-name"
            ##
            key: ""
            ## @param secondary.nodeAffinityPreset.values MySQL secondary node label values to match. Ignored if `secondary.affinity` is set.
            ## E.g.
            ## values:
            ##   - e2e-az1
            ##   - e2e-az2
            ##
            values: []
          ## @param secondary.affinity Affinity for MySQL secondary pods assignment
          ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
          ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
          ##
          affinity: {}
          ## @param secondary.nodeSelector Node labels for MySQL secondary pods assignment
          ## ref: https://kubernetes.io/docs/user-guide/node-selection/
          ##
          nodeSelector: {}
          ## @param secondary.tolerations Tolerations for MySQL secondary pods assignment
          ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
          ##
          tolerations: []
          ## @param secondary.priorityClassName MySQL secondary pods' priorityClassName
          ##
          priorityClassName: ""
          ## @param secondary.runtimeClassName MySQL secondary pods' runtimeClassName
          ##
          runtimeClassName: ""
          ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
          ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
          ##
          schedulerName: ""
          ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
          ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
          ##
          terminationGracePeriodSeconds: ""
          ## @param secondary.topologySpreadConstraints Topology Spread Constraints for pod assignment
          ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
          ## The value is evaluated as a template
          ##
          topologySpreadConstraints: []
          ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL secondary pods
          ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
          ##
          podManagementPolicy: ""
          ## MySQL secondary Pod security context
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
          ## @param secondary.podSecurityContext.enabled Enable security context for MySQL secondary pods
          ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
          ##
          podSecurityContext:
            enabled: true
            fsGroup: 1001
          ## MySQL secondary container security context
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
          ## @param secondary.containerSecurityContext.enabled MySQL secondary container securityContext
          ## @param secondary.containerSecurityContext.runAsUser User ID for the MySQL secondary container
          ## @param secondary.containerSecurityContext.runAsNonRoot Set MySQL secondary container's Security Context runAsNonRoot
          ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
          ## @param secondary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
          ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
          ##
          containerSecurityContext:
            enabled: true
            runAsUser: 1001
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: "RuntimeDefault"
          ## MySQL secondary container's resource requests and limits
          ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
          ## We usually recommend not to specify default resources and to leave this as a conscious
          ## choice for the user. This also increases chances charts run on environments with little
          ## resources, such as Minikube. If you do want to specify resources, uncomment the following
          ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          ## @param secondary.resources.limits The resources limits for MySQL secondary containers
          ## @param secondary.resources.requests The requested resources for MySQL secondary containers
          ##
          resources:
            ## Example:
            ## limits:
            ##    cpu: 250m
            ##    memory: 256Mi
            ##
            limits: {}
            ## Examples:
            ## requests:
            ##    cpu: 250m
            ##    memory: 256Mi
            ##
            requests: {}
          ## Configure extra options for liveness probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param secondary.livenessProbe.enabled Enable livenessProbe
          ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
          ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
          ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
          ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
          ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
          ##
          livenessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          ## Configure extra options for readiness probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param secondary.readinessProbe.enabled Enable readinessProbe
          ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
          ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
          ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
          ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
          ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
          ##
          readinessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          ## Configure extra options for startupProbe probe
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
          ## @param secondary.startupProbe.enabled Enable startupProbe
          ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
          ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
          ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
          ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
          ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
          ##
          startupProbe:
            enabled: true
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 15
            successThreshold: 1
          ## @param secondary.customLivenessProbe Override default liveness probe for MySQL secondary containers
          ##
          customLivenessProbe: {}
          ## @param secondary.customReadinessProbe Override default readiness probe for MySQL secondary containers
          ##
          customReadinessProbe: {}
          ## @param secondary.customStartupProbe Override default startup probe for MySQL secondary containers
          ##
          customStartupProbe: {}
          ## @param secondary.extraFlags MySQL secondary additional command line flags
          ## Can be used to specify command line flags, for example:
          ## E.g.
          ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
          ##
          extraFlags: ""
          ## @param secondary.extraEnvVars An array to add extra environment variables on MySQL secondary containers
          ## E.g.
          ## extraEnvVars:
          ##  - name: TZ
          ##    value: "Europe/Paris"
          ##
          extraEnvVars: []
          ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MySQL secondary containers
          ##
          extraEnvVarsCM: ""
          ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MySQL secondary containers
          ##
          extraEnvVarsSecret: ""
          ## @param secondary.extraPorts Extra ports to expose
          ##
          extraPorts: []
          ## Enable persistence using Persistent Volume Claims
          ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
          ##
          persistence:
            ## @param secondary.persistence.enabled Enable persistence on MySQL secondary replicas using a `PersistentVolumeClaim`
            ##
            enabled: true
            ## @param secondary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MySQL secondary replicas
            ## NOTE: When it's set the rest of persistence parameters are ignored
            ##
            existingClaim: ""
            ## @param secondary.persistence.subPath The name of a volume's sub path to mount for persistence
            ##
            subPath: ""
            ## @param secondary.persistence.storageClass MySQL secondary persistent volume storage Class
            ## If defined, storageClassName: <storageClass>
            ## If set to "-", storageClassName: "", which disables dynamic provisioning
            ## If undefined (the default) or set to null, no storageClassName spec is
            ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
            ##   GKE, AWS & OpenStack)
            ##
            storageClass: ""
            ## @param secondary.persistence.annotations MySQL secondary persistent volume claim annotations
            ##
            annotations: {}
            ## @param secondary.persistence.accessModes MySQL secondary persistent volume access Modes
            ##
            accessModes:
              - ReadWriteOnce
            ## @param secondary.persistence.size MySQL secondary persistent volume size
            ##
            size: 8Gi
            ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
            ## selector:
            ##   matchLabels:
            ##     app: my-app
            ##
            selector: {}
          ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MySQL secondary pod(s)
          ##
          extraVolumes: []
          ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MySQL secondary container(s)
          ##
          extraVolumeMounts: []
          ## @param secondary.initContainers Add additional init containers for the MySQL secondary pod(s)
          ##
          initContainers: []
          ## @param secondary.sidecars Add additional sidecar containers for the MySQL secondary pod(s)
          ##
          sidecars: []
          ## MySQL Secondary Service parameters
          ##
          service:
            ## @param secondary.service.type MySQL secondary Kubernetes service type
            ##
            type: ClusterIP
            ## @param secondary.service.ports.mysql MySQL secondary Kubernetes service port
            ##
            ports:
              mysql: 3306
            ## @param secondary.service.nodePorts.mysql MySQL secondary Kubernetes service node port
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
            ##
            nodePorts:
              mysql: ""
            ## @param secondary.service.clusterIP MySQL secondary Kubernetes service clusterIP IP
            ## e.g:
            ## clusterIP: None
            ##
            clusterIP: ""
            ## @param secondary.service.loadBalancerIP MySQL secondary loadBalancerIP if service type is `LoadBalancer`
            ## Set the LoadBalancer service type to internal only
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
            ##
            loadBalancerIP: ""
            ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
            ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
            ##
            externalTrafficPolicy: Cluster
            ## @param secondary.service.loadBalancerSourceRanges Addresses that are allowed when MySQL secondary service is LoadBalancer
            ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
            ## E.g.
            ## loadBalancerSourceRanges:
            ##   - 10.10.10.0/24
            ##
            loadBalancerSourceRanges: []
            ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
            ##
            extraPorts: []
            ## @param secondary.service.annotations Additional custom annotations for MySQL secondary service
            ##
            annotations: {}
            ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
            ## If "ClientIP", consecutive client requests will be directed to the same Pod
            ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            ##
            sessionAffinity: None
            ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
            ## sessionAffinityConfig:
            ##   clientIP:
            ##     timeoutSeconds: 300
            ##
            sessionAffinityConfig: {}
            ## Headless service properties
            ##
            headless:
              ## @param secondary.service.headless.annotations Additional custom annotations for headless MySQL secondary service.
              ##
              annotations: {}

          ## MySQL secondary Pod Disruption Budget configuration
          ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
          ##
          pdb:
            ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MySQL secondary pods
            ##
            create: false
            ## @param secondary.pdb.minAvailable Minimum number/percentage of MySQL secondary pods that should remain scheduled
            ##
            minAvailable: 1
            ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MySQL secondary pods that may be made unavailable
            ##
            maxUnavailable: ""
          ## @param secondary.podLabels Additional pod labels for MySQL secondary pods
          ##
          podLabels: {}

        ## @section RBAC parameters

        ##


        ## MySQL pods ServiceAccount

        ## ref:
        https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

        ##

        serviceAccount:
          ## @param serviceAccount.create Enable the creation of a ServiceAccount for MySQL pods
          ##
          create: true
          ## @param serviceAccount.name Name of the created ServiceAccount
          ## If not set and create is true, a name is generated using the mysql.fullname template
          ##
          name: ""
          ## @param serviceAccount.annotations Annotations for MySQL Service Account
          ##
          annotations: {}
          ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
          ##
          automountServiceAccountToken: true

        ## Role Based Access

        ## ref: https://kubernetes.io/docs/admin/authorization/rbac/

        ##

        rbac:
          ## @param rbac.create Whether to create & use RBAC resources or not
          ##
          create: false
          ## @param rbac.rules Custom RBAC rules to set
          ## e.g:
          ## rules:
          ##   - apiGroups:
          ##       - ""
          ##     resources:
          ##       - pods
          ##     verbs:
          ##       - get
          ##       - list
          ##
          rules: []

        ## @section Network Policy

        ##


        ## MySQL Nework Policy configuration

        ##

        networkPolicy:
          ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
          ##
          enabled: false
          ## @param networkPolicy.allowExternal The Policy model to apply.
          ## When set to false, only pods with the correct
          ## client label will have network access to the port MySQL is listening
          ## on. When true, MySQL will accept connections from any source
          ## (with the correct destination port).
          ##
          allowExternal: true
          ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed to MySQL
          ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
          ## and that match other criteria, the ones that have the good label, can reach the DB.
          ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
          ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
          ##
          ## Example:
          ## explicitNamespacesSelector:
          ##   matchLabels:
          ##     role: frontend
          ##   matchExpressions:
          ##    - {key: role, operator: In, values: [frontend]}
          ##
          explicitNamespacesSelector: {}

        ## @section Volume Permissions parameters

        ##


        ## Init containers parameters:

        ## volumePermissions: Change the owner and group of the persistent
        volume mountpoint to runAsUser:fsGroup values from the securityContext
        section.

        ##

        volumePermissions:
          ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
          ##
          enabled: false
          ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
          ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
          ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
          ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
          ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
          ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
          ##
          image:
            registry: docker.io
            repository: bitnami/os-shell
            tag: 11-debian-11-r90
            digest: ""
            pullPolicy: IfNotPresent
            ## Optionally specify an array of imagePullSecrets.
            ## Secrets must be manually created in the namespace.
            ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
            ## e.g:
            ## pullSecrets:
            ##   - myRegistryKeySecretName
            ##
            pullSecrets: []
          ## @param volumePermissions.resources Init container volume-permissions resources
          ##
          resources: {}

        ## @section Metrics parameters

        ##


        ## Mysqld Prometheus exporter parameters

        ##

        metrics:
          ## @param metrics.enabled Start a side-car prometheus exporter
          ##
          enabled: false
          ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
          ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
          ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
          ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
          ## @param metrics.image.pullPolicy Exporter image pull policy
          ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
          ##
          image:
            registry: docker.io
            repository: bitnami/mysqld-exporter
            tag: 0.15.0-debian-11-r70
            digest: ""
            pullPolicy: IfNotPresent
            ## Optionally specify an array of imagePullSecrets.
            ## Secrets must be manually created in the namespace.
            ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
            ## e.g:
            ## pullSecrets:
            ##   - myRegistryKeySecretName
            ##
            pullSecrets: []
          ## MySQL metrics container security context
          ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
          ## @param metrics.containerSecurityContext.enabled MySQL metrics container securityContext
          ## @param metrics.containerSecurityContext.runAsUser User ID for the MySQL metrics container
          ## @param metrics.containerSecurityContext.runAsNonRoot Set MySQL metrics container's Security Context runAsNonRoot
          ##
          containerSecurityContext:
            enabled: true
            runAsUser: 1001
            runAsNonRoot: true
          ## MySQL Prometheus exporter service parameters
          ## Mysqld Prometheus exporter liveness and readiness probes
          ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
          ## @param metrics.service.type Kubernetes service type for MySQL Prometheus Exporter
          ## @param metrics.service.clusterIP Kubernetes service clusterIP for MySQL Prometheus Exporter
          ## @param metrics.service.port MySQL Prometheus Exporter service port
          ## @param metrics.service.annotations [object] Prometheus exporter service annotations
          ##
          service:
            type: ClusterIP
            port: 9104
            clusterIP: ""
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "{{ .Values.metrics.service.port }}"
          ## @param metrics.extraArgs.primary Extra args to be passed to mysqld_exporter on Primary pods
          ## @param metrics.extraArgs.secondary Extra args to be passed to mysqld_exporter on Secondary pods
          ## ref: https://github.com/prometheus/mysqld_exporter/
          ## E.g.
          ## - --collect.auto_increment.columns
          ## - --collect.binlog_size
          ## - --collect.engine_innodb_status
          ## - --collect.engine_tokudb_status
          ## - --collect.global_status
          ## - --collect.global_variables
          ## - --collect.info_schema.clientstats
          ## - --collect.info_schema.innodb_metrics
          ## - --collect.info_schema.innodb_tablespaces
          ## - --collect.info_schema.innodb_cmp
          ## - --collect.info_schema.innodb_cmpmem
          ## - --collect.info_schema.processlist
          ## - --collect.info_schema.processlist.min_time
          ## - --collect.info_schema.query_response_time
          ## - --collect.info_schema.tables
          ## - --collect.info_schema.tables.databases
          ## - --collect.info_schema.tablestats
          ## - --collect.info_schema.userstats
          ## - --collect.perf_schema.eventsstatements
          ## - --collect.perf_schema.eventsstatements.digest_text_limit
          ## - --collect.perf_schema.eventsstatements.limit
          ## - --collect.perf_schema.eventsstatements.timelimit
          ## - --collect.perf_schema.eventswaits
          ## - --collect.perf_schema.file_events
          ## - --collect.perf_schema.file_instances
          ## - --collect.perf_schema.indexiowaits
          ## - --collect.perf_schema.tableiowaits
          ## - --collect.perf_schema.tablelocks
          ## - --collect.perf_schema.replication_group_member_stats
          ## - --collect.slave_status
          ## - --collect.slave_hosts
          ## - --collect.heartbeat
          ## - --collect.heartbeat.database
          ## - --collect.heartbeat.table
          ##
          extraArgs:
            primary: []
            secondary: []
          ## Mysqld Prometheus exporter resource requests and limits
          ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
          ## We usually recommend not to specify default resources and to leave this as a conscious
          ## choice for the user. This also increases chances charts run on environments with little
          ## resources, such as Minikube. If you do want to specify resources, uncomment the following
          ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
          ## @param metrics.resources.limits The resources limits for MySQL prometheus exporter containers
          ## @param metrics.resources.requests The requested resources for MySQL prometheus exporter containers
          ##
          resources:
            ## Example:
            ## limits:
            ##    cpu: 100m
            ##    memory: 256Mi
            ##
            limits: {}
            ## Examples:
            ## requests:
            ##    cpu: 100m
            ##    memory: 256Mi
            ##
            requests: {}
          ## Mysqld Prometheus exporter liveness probe
          ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
          ## @param metrics.livenessProbe.enabled Enable livenessProbe
          ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
          ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
          ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
          ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
          ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
          ##
          livenessProbe:
            enabled: true
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ## Mysqld Prometheus exporter readiness probe
          ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
          ## @param metrics.readinessProbe.enabled Enable readinessProbe
          ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
          ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
          ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
          ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
          ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
          ##
          readinessProbe:
            enabled: true
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ## Prometheus Service Monitor
          ## ref: https://github.com/coreos/prometheus-operator
          ##
          serviceMonitor:
            ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
            ##
            enabled: false
            ## @param metrics.serviceMonitor.namespace Specify the namespace in which the serviceMonitor resource will be created
            ##
            namespace: ""
            ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
            ##
            jobLabel: ""
            ## @param metrics.serviceMonitor.interval Specify the interval at which metrics should be scraped
            ##
            interval: 30s
            ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
            ## e.g:
            ## scrapeTimeout: 30s
            ##
            scrapeTimeout: ""
            ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
            ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
            ##
            relabelings: []
            ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
            ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
            ##
            metricRelabelings: []
            ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
            ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
            ##
            ## selector:
            ##   prometheus: my-prometheus
            ##
            selector: {}
            ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
            ##
            honorLabels: false
            ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
            ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
            ##
            labels: {}
            ## @param metrics.serviceMonitor.annotations ServiceMonitor annotations
            ##
            annotations: {}

          ## Prometheus Operator prometheusRule configuration
          ##
          prometheusRule:
            ## @param metrics.prometheusRule.enabled Creates a Prometheus Operator prometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
            ##
            enabled: false
            ## @param metrics.prometheusRule.namespace Namespace for the prometheusRule Resource (defaults to the Release Namespace)
            ##
            namespace: ""
            ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so prometheusRule will be discovered by Prometheus
            ##
            additionalLabels: {}
            ## @param metrics.prometheusRule.rules Prometheus Rule definitions
            ##  - alert: Mysql-Down
            ##    expr: absent(up{job="mysql"} == 1)
            ##    for: 5m
            ##    labels:
            ##      severity: warning
            ##      service: mariadb
            ##    annotations:
            ##      message: 'MariaDB instance {{`{{`}} $labels.instance {{`}}`}}  is down'
            ##      summary: MariaDB instance is down
            ##
            rules: []
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: 9.14.3
