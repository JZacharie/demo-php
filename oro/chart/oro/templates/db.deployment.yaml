apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-db'
  labels:
    katenary.io/component: db
    katenary.io/project: '{{ .Chart.Name }}'
    katenary.io/release: '{{ .Release.Name }}'
  annotations:
    katenary.io/docker-compose-sha1: 26eb54535aff4cf701c2177e321811281ffb9a01
    katenary.io/version: 2.0.0-beta2
spec:
  replicas: 1
  selector:
    matchLabels:
      katenary.io/component: db
      katenary.io/release: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        katenary.io/component: db
        katenary.io/release: '{{ .Release.Name }}'
    spec:
      containers:
        - name: db
          image: '{{ .Values.db.repository.image }}{{ if ne .Values.db.repository.tag "" }}:{{ .Values.db.repository.tag }}{{ end }}'
          ports:
            - name: db
              containerPort: 5432
          envFrom:
            - configMapRef:
                name: '{{ .Release.Name }}-db'
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db_data
          livenessProbe:
            exec:
              command:
                - pg_isready -U${POSTGRES_USER} -d${POSTGRES_DB}
            periodSeconds: 10
            initialDelaySeconds: 60
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: db_data
          {{- if  .Values.db.persistence.db_data.enabled }}
          persistentVolumeClaim:
            claimName: '{{ .Release.Name }}-db_data'
          {{ else }}
          emptyDir: {}
          {{- end }}

